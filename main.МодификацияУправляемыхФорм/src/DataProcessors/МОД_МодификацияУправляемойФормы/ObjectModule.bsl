#Область ПрограммныйИнтерфейс

Функция ПреобразоватьТабличныйДокументВJSON(ТабличныйДокумент) Экспорт
	ТаблицаОбласти = Новый ТаблицаЗначений;
	ТаблицаОбласти.Колонки.Добавить("Имя");
	ТаблицаОбласти.Колонки.Добавить("Верх");
	ТаблицаОбласти.Колонки.Добавить("ТабличныйДокумент");
	
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		ОписаниеОбласти = ТаблицаОбласти.Добавить();
		ОписаниеОбласти.Имя = Область.Имя;
		ОписаниеОбласти.Верх = Область.Верх;
		ОписаниеОбласти.ТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(Область.Имя);
	КонецЦикла;
	
	ТаблицаОбласти.Сортировать("Верх");
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЕстьОбласти = Ложь;
	Для Каждого ОписаниеОбласти Из ТаблицаОбласти Цикл
		ЕстьОбласть = ЗаписатьJSONТабличногоДокумента(ЗаписьJSON, ОписаниеОбласти.ТабличныйДокумент, ОписаниеОбласти.Имя);
		ЕстьОбласти = ЕстьОбласти ИЛИ ЕстьОбласть;
	КонецЦикла;

	ЗаписатьКонецКоллекции(ЗаписьJSON, ЕстьОбласти);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Результат = ЗаписьJSON.Закрыть();
	Результат = СтрЗаменить(Результат, "\u0009", Символы.Таб);
	
	Возврат Результат;
КонецФункции

Функция ПреобразоватьJSONВТабличныйДокумент(Текст) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Текст);

	ПерваяОбласть = Истина;
	ИмяСвойства = Неопределено;
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			
		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ДеревоСтроки = Новый ДеревоЗначений;

			ПараметрыДокумента = Новый Структура;
			
			ТаблицаКолонки = Новый ТаблицаЗначений;
			ТаблицаКолонки.Колонки.Добавить("Имя");
			ТаблицаКолонки.Колонки.Добавить("Псевдоним");
			ТаблицаКолонки.Колонки.Добавить("Приоритет");
			ТаблицаКолонки.Колонки.Добавить("Порядок");
			ТаблицаКолонки.Индексы.Добавить("Псевдоним");

			ПараметрыДокумента.Вставить("ТаблицаКолонки", ТаблицаКолонки);
			ПараметрыДокумента.Вставить("МаксимальныйУровень", 0);
			
			ПрочитатьСтрокиJSON(ЧтениеJSON, ДеревоСтроки, ПараметрыДокумента); 
			
			ЗаполнитьДопРеквизитыКолонок(ИмяСвойства, ПараметрыДокумента.ТаблицаКолонки);
			ПараметрыДокумента.ТаблицаКолонки.Сортировать("Приоритет,Порядок");
			
			Если ПерваяОбласть Тогда
				ПерваяОбласть = Ложь;
			Иначе
				ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы + 1, 1).Текст = "";
			КонецЕсли;
			
			НачальнаяСтрока = ТабличныйДокумент.ВысотаТаблицы;
			
			ВывестиСтрокиВТабличныйДокумент(ДеревоСтроки.Строки, ПараметрыДокумента, ТабличныйДокумент);
			
			Область = ТабличныйДокумент.Область(НачальнаяСтрока + 1, , ТабличныйДокумент.ВысотаТаблицы + 1);
			Область.СоздатьФорматСтрок();
			Область.Имя = ИмяСвойства;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти

#Область Объект

Функция ЗаписатьJSONТабличногоДокумента(ЗаписьJSON, ТабличныйДокумент, ИмяСвойства, ПараметрыДокумента = Неопределено, НомСтроки = 2, НомКолонки = 1)
	Если ПараметрыДокумента = Неопределено Тогда
		ПараметрыДокумента = Новый Структура;
		
		// расчет ширины имени
		ШиринаИмени = 0;
		Для Инд = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			Если ТабличныйДокумент.Область(1, Инд).Текст = "Имя" Тогда
				ШиринаИмени = Инд;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыДокумента.Вставить("ШиринаИмени", ШиринаИмени);
		
		ТаблицаКолонки = Новый ТаблицаЗначений;
		ТаблицаКолонки.Колонки.Добавить("Номер");
		ТаблицаКолонки.Колонки.Добавить("Имя");
		ТаблицаКолонки.Колонки.Добавить("Приоритет");
		ТаблицаКолонки.Колонки.Добавить("Порядок");
		
		Для НомерКолонки = ШиринаИмени + 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ТекстЯчейки = ТабличныйДокумент.Область(1, НомерКолонки).Текст;
			Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеКолонки = ТаблицаКолонки.Добавить();
			ОписаниеКолонки.Номер = НомерКолонки;
			ОписаниеКолонки.Имя = ТекстЯчейки;
		КонецЦикла;
		
		ЗаполнитьДопРеквизитыКолонок(ИмяСвойства, ТаблицаКолонки);
		ТаблицаКолонки.Сортировать("Приоритет,Порядок");
		ПараметрыДокумента.Вставить("ТаблицаКолонки", ТаблицаКолонки);
	КонецЕсли;
	
	ИмяОбъекта = ТабличныйДокумент.Область(НомСтроки, НомКолонки).Текст;
	Если НЕ ЗначениеЗаполнено(ИмяОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Пока Истина Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЕстьСвойства = Ложь;
		Если ПараметрыДокумента.ШиринаИмени > 0 Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("Имя");
			ЗаписьJSON.ЗаписатьЗначение(ИмяОбъекта);
			ЕстьСвойства = Истина;
		КонецЕсли;
		
		Для Каждого ОписаниеКолонки Из ПараметрыДокумента.ТаблицаКолонки Цикл
			ТекстЯчейки = ТабличныйДокумент.Область(НомСтроки, ОписаниеКолонки.Номер).Текст;
			Если ЗначениеЗаполнено(ТекстЯчейки) Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ОписаниеКолонки.Имя);
				ЧислоСтрок = СтрЧислоСтрок(ТекстЯчейки);
				Если ЧислоСтрок > 1 Тогда
					ЗаписьJSON.ЗаписатьНачалоМассива();
					Для Инд = 1 По ЧислоСтрок Цикл
						ЗаписьJSON.ЗаписатьЗначение(СтрПолучитьСтроку(ТекстЯчейки, Инд));
					КонецЦикла;
					ЗаписьJSON.ЗаписатьКонецМассива();
				Иначе
					ЗаписьJSON.ЗаписатьЗначение(ТекстЯчейки);
				КонецЕсли;
				
				ЕстьСвойства = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НомСтроки = НомСтроки + 1;
		Если НомСтроки > ТабличныйДокумент.ВысотаТаблицы Тогда
			ЗаписатьКонецКоллекции(ЗаписьJSON, ЕстьСвойства);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			Прервать;
		КонецЕсли;

		ТекстЯчейки = ТабличныйДокумент.Область(НомСтроки, НомКолонки).Текст;
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Если НомКолонки < ПараметрыДокумента.ШиринаИмени Тогда
				ЗаписатьJSONТабличногоДокумента(ЗаписьJSON, ТабличныйДокумент, "", ПараметрыДокумента, НомСтроки, НомКолонки + 1);
			КонецЕсли;
			
			ТекстЯчейки = ТабличныйДокумент.Область(НомСтроки, НомКолонки).Текст;
			Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
				ЗаписатьКонецКоллекции(ЗаписьJSON, ЕстьСвойства);
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьКонецКоллекции(ЗаписьJSON, ЕстьСвойства);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ИмяОбъекта = ТекстЯчейки;
	КонецЦикла;
	
	ЗаписатьКонецКоллекции(ЗаписьJSON);
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	Возврат Истина;
КонецФункции

Процедура ЗаписатьКонецКоллекции(ЗаписьJSON, Записывать = Истина)
	Если Записывать Тогда
		ЗаписьJSON.ЗаписатьБезОбработки(",");
	КонецЕсли;
КонецПроцедуры

Процедура ПрочитатьСтрокиJSON(ЧтениеJSON, ДеревоСтроки, ПараметрыЧтения, Родитель = Неопределено)
	Если Родитель = Неопределено Тогда
		ТекущийРодитель = ДеревоСтроки;
	Иначе
		ТекущийРодитель = Родитель;
	КонецЕсли;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Прервать;
		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ПрочитатьСтрокуJSON(ЧтениеJSON, ДеревоСтроки, ПараметрыЧтения, ТекущийРодитель);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПрочитатьСтрокуJSON(ЧтениеJSON, ДеревоСтроки, ПараметрыЧтения, Родитель)
	НоваяСтрока = Родитель.Строки.Добавить();
	ПараметрыЧтения.МаксимальныйУровень = Макс(ПараметрыЧтения.МаксимальныйУровень, НоваяСтрока.Уровень() + 1);
	
	ОписаниеКолонки = Неопределено;
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			Прервать;
			
		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Если ЗначениеЗаполнено(ИмяСвойства) Тогда
				ОписаниеКолонки = ПараметрыЧтения.ТаблицаКолонки.Найти(ИмяСвойства, "Имя");
				Если ОписаниеКолонки = Неопределено Тогда
					ОписаниеКолонки = ПараметрыЧтения.ТаблицаКолонки.Добавить();
					ОписаниеКолонки.Имя = ИмяСвойства;
					ОписаниеКолонки.Псевдоним = СтрШаблон("Колонка%1", Формат(ПараметрыЧтения.ТаблицаКолонки.Количество(), "ЧГ=0"));
					
					ДеревоСтроки.Колонки.Добавить(ОписаниеКолонки.Псевдоним);
				КонецЕсли;
			Иначе
				ОписаниеКолонки = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			Если ОписаниеКолонки = Неопределено Тогда
				ПрочитатьСтрокиJSON(ЧтениеJSON, ДеревоСтроки, ПараметрыЧтения, НоваяСтрока);
			Иначе
				НоваяСтрока[ОписаниеКолонки.Псевдоним] = ПрочитатьТекстИзJSON(ЧтениеJSON);	
			КонецЕсли;
		Иначе
			НоваяСтрока[ОписаниеКолонки.Псевдоним] = ЧтениеJSON.ТекущееЗначение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПрочитатьТекстИзJSON(ЧтениеJSON)
	МассивСтроки = Новый Массив;
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Прервать;
		Иначе
			МассивСтроки.Добавить(ЧтениеJSON.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтроки, Символы.ПС);
КонецФункции

Процедура ВывестиСтрокиВТабличныйДокумент(СтрокиДерева, ПараметрыДокумента, ТабличныйДокумент, НомераКолонок = Неопределено, Уровень = 1)
	Если Уровень = 1 Тогда
		НомераКолонок = Новый Соответствие;
		
		НомСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;
		НомКолонки = 1;
		Для Каждого ОписаниеКолонки Из ПараметрыДокумента.ТаблицаКолонки Цикл
			НомераКолонок.Вставить(ОписаниеКолонки, НомКолонки);
			
			Если ОписаниеКолонки.Имя = "Имя" Тогда
				Для Инд = 1 По ПараметрыДокумента.МаксимальныйУровень - 1 Цикл
					ОбластьКолонки = ТабличныйДокумент.Область( , НомКолонки + Инд - 1, , НомКолонки + Инд - 1);
					ОбластьКолонки.ШиринаКолонки = 4;
				КонецЦикла;
				ОбластьКолонки = ТабличныйДокумент.Область( , НомКолонки + ПараметрыДокумента.МаксимальныйУровень - 1, , НомКолонки + ПараметрыДокумента.МаксимальныйУровень - 1);
				ОбластьКолонки.ШиринаКолонки = 20;
				
				ОбластьКолонки = ТабличныйДокумент.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки + ПараметрыДокумента.МаксимальныйУровень - 1);
				ОбластьКолонки.Объединить();
				
				НомКолонки = НомКолонки + ПараметрыДокумента.МаксимальныйУровень;
			Иначе
				ОбластьКолонки = ТабличныйДокумент.Область(НомСтроки, НомКолонки);
				ОбластьКолонки.ШиринаКолонки = 20;
				
				НомКолонки = НомКолонки + 1;
			КонецЕсли;
			
			ОбластьКолонки.Текст = ОписаниеКолонки.Имя;
			ОбластьКолонки.ЦветФона = ЦветаСтиля.ЦветФонаШапкиОтчета;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		НомСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для Каждого ОписаниеКолонки Из ПараметрыДокумента.ТаблицаКолонки Цикл
			Если ЗначениеЗаполнено(СтрокаДерева[ОписаниеКолонки.Псевдоним]) Тогда
				Если ОписаниеКолонки.Имя = "Имя" Тогда
					ОбластьКолонки = ТабличныйДокумент.Область(НомСтроки, НомераКолонок[ОписаниеКолонки] + Уровень - 1);
				Иначе
					ОбластьКолонки = ТабличныйДокумент.Область(НомСтроки, НомераКолонок[ОписаниеКолонки]);
				КонецЕсли;
				
				ОбластьКолонки.Текст = СтрокаДерева[ОписаниеКолонки.Псевдоним];
			КонецЕсли;
		КонецЦикла;

		ВывестиСтрокиВТабличныйДокумент(СтрокаДерева.Строки, ПараметрыДокумента, ТабличныйДокумент, НомераКолонок, Уровень + 1);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДопРеквизитыКолонок(ИмяРаздела, ТаблицаКолонки)
	Для Каждого ОписаниеКолонки Из ТаблицаКолонки Цикл
		ИмяКолонки = ОписаниеКолонки.Имя;
		МассивЧасти = СтрРазделить(ИмяКолонки, "().[]", Ложь);
		ОписаниеКолонки.Порядок = СтрСоединить(МассивЧасти, "");
		
		Если СтрНачинаетсяС(ИмяРаздела, "Элементы") Тогда
			Если ИмяКолонки = "Имя" Тогда
				ОписаниеКолонки.Приоритет = 1;
			ИначеЕсли ИмяКолонки = "Тип" Тогда
				ОписаниеКолонки.Приоритет = 2;
			ИначеЕсли ИмяКолонки = "ПутьКДанным" Тогда
				ОписаниеКолонки.Приоритет = 3;
			ИначеЕсли ИмяКолонки = "Вместо()" Тогда
				ОписаниеКолонки.Приоритет = 4;
			ИначеЕсли ИмяКолонки = "МестоРасположения()" Тогда
				ОписаниеКолонки.Приоритет = 5;
			ИначеЕсли ИмяКолонки = "Родитель" Тогда
				ОписаниеКолонки.Приоритет = 6;
			ИначеЕсли ИмяКолонки = "Заголовок" Тогда
				ОписаниеКолонки.Приоритет = 7;
			ИначеЕсли Лев(ИмяКолонки, 1) = "[" Тогда
				ОписаниеКолонки.Приоритет = 9;
			Иначе
				ОписаниеКолонки.Приоритет = 8;
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(ИмяРаздела, "Реквизиты") Тогда
			Если ИмяКолонки = "Имя" Тогда
				ОписаниеКолонки.Приоритет = 1;
			ИначеЕсли Найти(ИмяКолонки, "ТипЗначения") Тогда
				ОписаниеКолонки.Приоритет = 2;
			Иначе
				ОписаниеКолонки.Приоритет = 3;
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(ИмяРаздела, "Команды") Тогда
			Если ИмяКолонки = "Имя" Тогда
				ОписаниеКолонки.Приоритет = 1;
			ИначеЕсли ИмяКолонки = "Действие" Тогда
				ОписаниеКолонки.Приоритет = 2;
			ИначеЕсли ИмяКолонки = "Заголовок" Тогда
				ОписаниеКолонки.Приоритет = 3;
			Иначе
				ОписаниеКолонки.Приоритет = 4;
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(ИмяРаздела, "ОТ_") Тогда
			Если ИмяКолонки = "Маркер" Тогда
				ОписаниеКолонки.Приоритет = 1;
			ИначеЕсли ИмяКолонки = "Текст" Тогда
				ОписаниеКолонки.Приоритет = 2;
			ИначеЕсли ИмяКолонки = "Счетчик" Тогда
				ОписаниеКолонки.Приоритет = 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти