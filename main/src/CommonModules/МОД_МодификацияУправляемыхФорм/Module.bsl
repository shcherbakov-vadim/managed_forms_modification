///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019-2024, Щербаков Вадим, chtcherbakov.vadim@gmail.com
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
// Ссылка на репозиторий:
// https://github.com/shcherbakov-vadim/managed_forms_modification.git

#Если Сервер Тогда

Функция СоздатьДопРеквизитПриНеобходимости(Форма)
	ИмяДопРеквизита = "МОД_МодификацияУправляемыхФорм_Параметры";
	
	СтруктураЗначения = Новый Структура(ИмяДопРеквизита);
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, Форма);

	Если СтруктураЗначения[ИмяДопРеквизита] = Неопределено Тогда
		МассивДобавляемыеРеквизиты = Новый Массив;
		МассивДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяДопРеквизита, Новый ОписаниеТипов("Строка")));
		Форма.ИзменитьРеквизиты(МассивДобавляемыеРеквизиты);
	КонецЕсли;
	
	Возврат ИмяДопРеквизита;
КонецФункции

Процедура ПрименитьМакетИзменений(Форма) Экспорт
	ИмяДопРеквизита = СоздатьДопРеквизитПриНеобходимости(Форма);
	
	Если ЗначениеЗаполнено(Форма[ИмяДопРеквизита]) Тогда
		Возврат;
	КонецЕсли;
	
	МакетИзменений = ПолучитьМакетИзменений(Форма);
	
	Если МакетИзменений = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Форма[ИмяДопРеквизита] = "ПередИзменением";
	
	ИзменитьФорму(Форма, МакетИзменений);	

	Форма[ИмяДопРеквизита] = "Изменено";
КонецПроцедуры

Процедура ИзменитьРеквизиты(ПараметрыОбработки, МакетИзменений, ИмяРодителя = Неопределено, ШиринаИмени = Неопределено, НомСтроки = 2, НомКолонки = 1)
	Форма = ПараметрыОбработки.Форма;
	
	МассивРеквизиты = Форма.ПолучитьРеквизиты(ИмяРодителя);
	СоответствиеРеквизиты = Новый Соответствие;
	Для Каждого РеквизитФормы Из МассивРеквизиты Цикл
		СоответствиеРеквизиты.Вставить(РеквизитФормы.Имя, РеквизитФормы);
	КонецЦикла;
	
	СвойстваРеквизитов = Неопределено;
	МассивДобавляемыеРеквизиты = Новый Массив;

	Если ТипЗнч(ПараметрыОбработки.ДанныеМакета) = Тип("Соответствие") Тогда
		Для Каждого ЭлементКоллекции Из МакетИзменений Цикл
			ИмяРеквизита = ЭлементКоллекции["Имя"];

			ЗаполнитьПараметры(ПараметрыОбработки, ИмяРеквизита);
			
			Если Найти(ИмяРеквизита, "(") > 0 Тогда
				ПрименитьШаблон(ПараметрыОбработки, "Реквизиты", ИмяРеквизита, ИмяРодителя)
			Иначе
				РеквизитФормы = СоответствиеРеквизиты[ИмяРеквизита];
				
				СтруктураСвойства = Новый Структура;
				СтруктураОперации = Новый Структура;
				Для Каждого ЭлементСоответствия Из ЭлементКоллекции Цикл
					Если ЭлементСоответствия.Ключ <> "" Тогда
						ИзменитьСвойствоРеквизита(Форма, ПараметрыОбработки, РеквизитФормы, ИмяРеквизита, СвойстваРеквизитов
							,ЭлементСоответствия.Ключ, ПолучитьЗначениеJSON(ЭлементСоответствия.Значение), СтруктураСвойства, СтруктураОперации);
					КонецЕсли;
				КонецЦикла;
				
				ПрименитьИзмененияРеквизита(Форма, МассивДобавляемыеРеквизиты, РеквизитФормы, ИмяРеквизита, ИмяРодителя, СтруктураСвойства, СтруктураОперации);
			КонецЕсли;
		КонецЦикла;

		Форма.ИзменитьРеквизиты(МассивДобавляемыеРеквизиты);
		
		Для Каждого ЭлементКоллекции Из МакетИзменений Цикл
			ПодчиненныеЭлементы = ЭлементКоллекции[""];
			Если ПодчиненныеЭлементы <> Неопределено Тогда
				ИмяРеквизита = ЭлементКоллекции["Имя"];
				ИзменитьРеквизиты(ПараметрыОбработки, ПодчиненныеЭлементы, ?(ИмяРодителя = Неопределено, ИмяРеквизита, ИмяРодителя + "." + ИмяРеквизита));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ШиринаИмени = Неопределено Тогда
			// расчет ширины имени
			ШиринаИмени = 0;
			Для Инд = 1 По МакетИзменений.ШиринаТаблицы Цикл
				Если МакетИзменений.Область(1, Инд).Текст = "Имя" Тогда
					ШиринаИмени = Инд;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИмяРеквизита = МакетИзменений.Область(НомСтроки, НомКолонки).Текст;
		Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда
			Возврат;
		КонецЕсли;
		
		Пока Истина Цикл
			ЗаполнитьПараметры(ПараметрыОбработки, ИмяРеквизита);
			Если Найти(ИмяРеквизита, "(") > 0 Тогда
				ПрименитьШаблон(ПараметрыОбработки, "Реквизиты", ИмяРеквизита, ИмяРодителя)
			Иначе
				РеквизитФормы = СоответствиеРеквизиты[ИмяРеквизита];
				
				СтруктураСвойства = Новый Структура;
				СтруктураОперации = Новый Структура;
				Для Инд = ШиринаИмени + 1 По МакетИзменений.ШиринаТаблицы Цикл
					Если ЗначениеЗаполнено(МакетИзменений.Область(НомСтроки, Инд).Текст) Тогда
						ИмяСвойства = МакетИзменений.Область(1, Инд).Текст;
						ОписаниеЗначения = МакетИзменений.Область(НомСтроки, Инд).Текст;
						
						ИзменитьСвойствоРеквизита(Форма, ПараметрыОбработки, РеквизитФормы, ИмяРеквизита, СвойстваРеквизитов
							,ИмяСвойства, ОписаниеЗначения, СтруктураСвойства, СтруктураОперации)
					КонецЕсли;
				КонецЦикла;
				
				ПрименитьИзмененияРеквизита(Форма, МассивДобавляемыеРеквизиты, РеквизитФормы, ИмяРеквизита, ИмяРодителя, СтруктураСвойства, СтруктураОперации);
			КонецЕсли;
			
			НомСтроки = НомСтроки + 1;
			Если НомСтроки > МакетИзменений.ВысотаТаблицы Тогда
				Прервать;
			КонецЕсли;
			
			ТекстЯчейки = МакетИзменений.Область(НомСтроки, НомКолонки).Текст;
			Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
				Если НомКолонки < ШиринаИмени Тогда
					Форма.ИзменитьРеквизиты(МассивДобавляемыеРеквизиты);
					МассивДобавляемыеРеквизиты.Очистить();
					
					ИзменитьРеквизиты(ПараметрыОбработки, МакетИзменений, ?(ИмяРодителя = Неопределено, ИмяРеквизита, ИмяРодителя + "." + ИмяРеквизита), ШиринаИмени, НомСтроки, НомКолонки + 1);
				КонецЕсли;
				
				ТекстЯчейки = МакетИзменений.Область(НомСтроки, НомКолонки).Текст;
				Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			ИмяРеквизита = ТекстЯчейки;
		КонецЦикла;

		Форма.ИзменитьРеквизиты(МассивДобавляемыеРеквизиты);
	КонецЕсли;
	
	УстановитьЗначенияСвойств(Форма, СвойстваРеквизитов);
КонецПроцедуры

Процедура ИзменитьСвойствоРеквизита(Форма, ПараметрыОбработки, РеквизитФормы, ИмяРеквизита, СвойстваРеквизитов, ИмяСвойства, ОписаниеЗначения, СтруктураСвойства, СтруктураОперации)
	ЗаполнитьПараметры(ПараметрыОбработки, ОписаниеЗначения);
	
	Поз = Найти(ИмяСвойства, "(");
	Если Поз > 0 Тогда
		ИмяОбработчика = Лев(ИмяСвойства, Поз - 1);
		ИмяПараметра = ПолучитьСодержимое(ИмяСвойства, Поз);
		Если НЕ ЗначениеЗаполнено(ИмяПараметра) Тогда
			ИмяПараметра = ИмяОбработчика;
		КонецЕсли;
		
		Если ИмяОбработчика = "Вместо" Тогда
			СтруктураОперации.Вставить(ИмяОбработчика, ОписаниеЗначения);
		ИначеЕсли ЗначениеЗаполнено(ИмяОбработчика) Тогда
			ТекущееЗначение = ?(РеквизитФормы <> Неопределено, ПолучитьЗначениеСвойства(Форма, РеквизитФормы, ИмяРеквизита, ИмяПараметра), Неопределено);
			Результат = ВычислитьЗначениеНастройки(ПараметрыОбработки, ИмяОбработчика, ОписаниеЗначения, ТекущееЗначение);
		Иначе
			Результат = Вычислить(ОписаниеЗначения);
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИмяПараметра, ".") Тогда
			ДобавитьЗначениеСвойства(СвойстваРеквизитов, ИмяРеквизита + ИмяПараметра, Результат);
		Иначе
			СтруктураСвойства.Вставить(ИмяПараметра, Результат);
		КонецЕсли;
	Иначе
		Если СтрНачинаетсяС(ИмяСвойства, ".") Тогда
			ДобавитьЗначениеСвойства(СвойстваРеквизитов, ИмяРеквизита + ИмяСвойства, ОписаниеЗначения);
		Иначе
			СтруктураСвойства.Вставить(ИмяСвойства, ОписаниеЗначения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПрименитьИзмененияРеквизита(Форма, МассивДобавляемыеРеквизиты, РеквизитФормы, ИмяРеквизита, ИмяРодителя, СтруктураСвойства, СтруктураОперации)
	Если РеквизитФормы = Неопределено Тогда
		Если СтруктураСвойства.Свойство("ТипЗначения") Тогда
			РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, СтруктураСвойства.ТипЗначения, ИмяРодителя);
		Иначе
			РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов, ИмяРодителя);
		КонецЕсли;
		
		МассивДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		Если СтруктураОперации.Свойство("Вместо") Тогда
			ИсключаемыеСвойства = "";
			Для Каждого ЭлементСтруктуры Из СтруктураСвойства Цикл
				Если НЕ СтруктураОперации.Свойство(ЭлементСтруктуры.Ключ) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + "," + ЭлементСтруктуры.Ключ;
				КонецЕсли;
			КонецЦикла;
			
			ИсходныйРеквизит = Неопределено;
			Для Каждого СуществующийРеквизит Из Форма.ПолучитьРеквизиты() Цикл
				Если СуществующийРеквизит.Имя = СтруктураОперации.Вместо Тогда
					ИсходныйРеквизит = СуществующийРеквизит;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИсходныйРеквизит = Неопределено Тогда
				ВызватьИсключение СтрШаблон("Не найден существующий реквизит %1", СтруктураОперации.Вместо);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РеквизитФормы, ИсходныйРеквизит, , ИсключаемыеСвойства);
			
			СкопироватьПодчиненныеРеквизиты(Форма, ИсходныйРеквизит, РеквизитФормы, МассивДобавляемыеРеквизиты);
		КонецЕсли;
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(РеквизитФормы, СтруктураСвойства);
КонецПроцедуры

Процедура СкопироватьПодчиненныеРеквизиты(Форма, РеквизитИсточник, РеквизитПолучатель, ДобавляемыеРеквизиты)
	ПутьИсточника = ПолучитьПолноеИмяРеквизита(РеквизитИсточник);
	ПутьПолучателя = ПолучитьПолноеИмяРеквизита(РеквизитПолучатель);
	
	Для Каждого ПодчиненныйРеквизит Из Форма.ПолучитьРеквизиты(ПутьИсточника) Цикл
		РеквизитФормы = Новый РеквизитФормы(ПодчиненныйРеквизит.Имя, ПодчиненныйРеквизит.ТипЗначения, ПутьПолучателя);
		ЗаполнитьЗначенияСвойств(РеквизитФормы, ПодчиненныйРеквизит, , "Имя,ТипЗначения,Путь");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		Если ПодчиненныйРеквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"))
			ИЛИ ПодчиненныйРеквизит.ТипЗначения.СодержитТип(Тип("ДеревоЗначений")) Тогда
			
			СкопироватьПодчиненныеРеквизиты(Форма, ПодчиненныйРеквизит, РеквизитФормы, ДобавляемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПолноеИмяРеквизита(РеквизитФормы)
	Путь = РеквизитФормы.Путь;
	Если ЗначениеЗаполнено(Путь) Тогда
		Путь = Путь + ".";
	КонецЕсли;
	
	Путь = Путь + РеквизитФормы.Имя;
	Возврат Путь;
КонецФункции

Процедура ДобавитьЗначениеСвойства(ТаблицаРезультат, Путь, Значение)
	Если ТаблицаРезультат = Неопределено Тогда
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ТаблицаРезультат.Колонки.Добавить("Путь");
		ТаблицаРезультат.Колонки.Добавить("ДлинаПути");
		ТаблицаРезультат.Колонки.Добавить("МассивПуть");
		ТаблицаРезультат.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Структура"));
	КонецЕсли;
	
	МассивПуть = СтрРазделить(Путь, ".");
	ИмяСвойства = МассивПуть[МассивПуть.ВГраница()];
	МассивПуть.Удалить(МассивПуть.ВГраница());
	Путь = СтрРазделить(МассивПуть, ".");
	
	СтрокаРезультата = ТаблицаРезультат.Найти(Путь, "Путь");
	Если СтрокаРезультата = Неопределено Тогда
		СтрокаРезультата = ТаблицаРезультат.Добавить();
		СтрокаРезультата.Путь = Путь;
		СтрокаРезультата.МассивПуть = МассивПуть;
		СтрокаРезультата.ДлинаПути = МассивПуть.Количество();
	КонецЕсли;
		
	СтрокаРезультата.Свойства.Вставить(ИмяСвойства, Значение);
КонецПроцедуры

Процедура УстановитьЗначенияСвойств(Форма, ТаблицаРезультат)
	Если ТаблицаРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультат.Сортировать("ДлинаПути");
	Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		ТекущийКонтекст = Форма;
		Для Каждого ЭлементПути Из СтрокаТаблицы.МассивПуть Цикл
			ТекущийКонтекст = ТекущийКонтекст[ЭлементПути];
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ТекущийКонтекст, СтрокаТаблицы.Свойства);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗначениеСвойства(Форма, РеквизитФормы, ИмяРеквизита, ИмяПараметра)
	Если СтрНачинаетсяС(ИмяПараметра, ".") Тогда
		МассивПуть = СтрРазделить(ИмяРеквизита + ИмяПараметра, ".");
		ИмяСвойства = МассивПуть[МассивПуть.ВГраница()];
		МассивПуть.Удалить(МассивПуть.ВГраница());
		
		ТекущийКонтекст = Форма;
		Для Каждого ЭлементПути Из МассивПуть Цикл
			ТекущийКонтекст = ТекущийКонтекст[ЭлементПути];
		КонецЦикла;
		
	Иначе
		ТекущийКонтекст = РеквизитФормы;
		ИмяСвойства = ИмяПараметра;
	КонецЕсли;
		
	Возврат ТекущийКонтекст[ИмяСвойства];
КонецФункции

Процедура ИзменитьКоманды(ПараметрыОбработки, МакетИзменений)
	Форма = ПараметрыОбработки.Форма;
	
	Если ТипЗнч(ПараметрыОбработки.ДанныеМакета) = Тип("Соответствие") Тогда
		Для Каждого ЭлементКоллекции Из МакетИзменений Цикл
			ИмяКоманды = ЭлементКоллекции["Имя"];
			
			ЗаполнитьПараметры(ПараметрыОбработки, ИмяКоманды);
			Если Найти(ИмяКоманды, "(") > 0 Тогда
				ПрименитьШаблон(ИмяКоманды, "Команды", ИмяКоманды);
			Иначе
				Команда = Форма.Команды.Найти(ИмяКоманды);
				
				СтруктураСвойства = Новый Структура;
				Для Каждого ЭлементСоответствия Из ЭлементКоллекции Цикл
					ИзменитьСвойствоКоманды(ПараметрыОбработки, Команда, ИмяКоманды
						,ЭлементСоответствия.Ключ, ПолучитьЗначениеJSON(ЭлементСоответствия.Значение), СтруктураСвойства);
				КонецЦикла;

				ПрименитьИзмененияКоманды(Форма, Команда, ИмяКоманды, СтруктураСвойства);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для НомСтроки = 2 По МакетИзменений.ВысотаТаблицы Цикл
			ИмяКоманды = МакетИзменений.Область(НомСтроки, 1).Текст;
			Если НЕ ЗначениеЗаполнено(ИмяКоманды) Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьПараметры(ПараметрыОбработки, ИмяКоманды);
			Если Найти(ИмяКоманды, "(") > 0 Тогда
				ПрименитьШаблон(ИмяКоманды, "Команды", ИмяКоманды);
			Иначе
				Команда = Форма.Команды.Найти(ИмяКоманды);
				
				СтруктураСвойства = Новый Структура;
				Для Инд = 2 По МакетИзменений.ШиринаТаблицы Цикл
					Если ЗначениеЗаполнено(МакетИзменений.Область(НомСтроки, Инд).Текст) Тогда
						ИмяСвойства = МакетИзменений.Область(1, Инд).Текст;
						ОписаниеЗначения = МакетИзменений.Область(НомСтроки, Инд).Текст;
						
						ИзменитьСвойствоКоманды(ПараметрыОбработки, Команда, ИмяКоманды
							,ИмяСвойства, ОписаниеЗначения, СтруктураСвойства);
					КонецЕсли;
				КонецЦикла;
				
				ПрименитьИзмененияКоманды(Форма, Команда, ИмяКоманды, СтруктураСвойства);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьСвойствоКоманды(ПараметрыОбработки, Команда, ИмяКоманды, ИмяСвойства, ОписаниеЗначения, СтруктураСвойства)
	ЗаполнитьПараметры(ПараметрыОбработки, ОписаниеЗначения);
	
	Поз = Найти(ИмяСвойства, "(");
	Если Поз > 0 Тогда
		ИмяОбработчика = Лев(ИмяСвойства, Поз - 1);
		ИмяПараметра = ПолучитьСодержимое(ИмяСвойства, Поз);
		Если НЕ ЗначениеЗаполнено(ИмяПараметра) Тогда
			ИмяПараметра = ИмяОбработчика;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяОбработчика) Тогда
			ТекущееЗначение = ?(Команда <> Неопределено, Команда[ИмяПараметра], Неопределено);
			Результат = ВычислитьЗначениеНастройки(ПараметрыОбработки, ИмяОбработчика, ОписаниеЗначения, ТекущееЗначение);
		Иначе
			Результат = Вычислить(ОписаниеЗначения);
		КонецЕсли;
		
		СтруктураСвойства.Вставить(ИмяПараметра, Результат);
	Иначе
		Если ИмяСвойства = "Действие" Тогда
			Если Найти(ОписаниеЗначения, "%") > 0 Тогда
				ОписаниеЗначения = СтрЗаменить(ОписаниеЗначения, "%", ИмяКоманды);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураСвойства.Вставить(ИмяСвойства, ОписаниеЗначения);
	КонецЕсли;
КонецПроцедуры

Процедура ПрименитьИзмененияКоманды(Форма, Команда, ИмяКоманды, СтруктураСвойства)
	Если Команда = Неопределено Тогда
		Команда = Форма.Команды.Добавить(ИмяКоманды);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Команда, СтруктураСвойства);
КонецПроцедуры

Процедура ИзменитьЭлементы(ПараметрыОбработки, МакетИзменений, ИмяРодителя = Неопределено, ШиринаИмени = Неопределено, НомСтроки = 2, НомКолонки = 1)
	Форма = ПараметрыОбработки.Форма;
	
	Если ИмяРодителя = Неопределено Тогда
		Родитель = Неопределено;
	ИначеЕсли ИмяРодителя = "Форма" Тогда
		Родитель = Форма;
	Иначе
		Родитель = Форма.Элементы[ИмяРодителя];
	КонецЕсли;
	
	КэшРеквизиты = Неопределено;

	Если ТипЗнч(ПараметрыОбработки.ДанныеМакета) = Тип("Соответствие") Тогда
		Для Каждого ЭлементКоллекции Из МакетИзменений Цикл
			ИмяЭлемента = ЭлементКоллекции["Имя"];
		
			ЗаполнитьПараметры(ПараметрыОбработки, ИмяЭлемента);
			
			Если Найти(ИмяЭлемента, "(") Тогда
				ПрименитьШаблон(ПараметрыОбработки, "Элементы", ИмяЭлемента, ИмяРодителя);
			Иначе
				Если Найти(ИмяЭлемента, "%") > 0 Тогда
					ТекЭлементРодитель = Родитель;
					Пока ТипЗнч(ТекЭлементРодитель) = Тип("ГруппаФормы") Цикл
						ТекЭлементРодитель = ТекЭлементРодитель.Родитель;
					КонецЦикла;
					
					ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "%", ТекЭлементРодитель.Имя);
				КонецЕсли;
				
				Если ИмяЭлемента = "Форма" Тогда
					Элемент = Форма;
				Иначе
					Элемент = Форма.Элементы.Найти(ИмяЭлемента);
				КонецЕсли;
				
				СтруктураСвойства = Новый Структура;
				СтруктураЗависимыеСвойства = Новый Структура;
				СтруктураДействия = Новый Структура;
				СтруктураОперации = Новый Структура;
				
				Для Каждого ЭлементСоответствия Из ЭлементКоллекции Цикл
					Если ЭлементСоответствия.Ключ <> "" Тогда
						Если ПараметрыОбработки.ЗависимыеСвойстваЭлементов[ЭлементСоответствия.Ключ] <> Неопределено Тогда
							СтруктураСвойстваРезультат = СтруктураЗависимыеСвойства;
						Иначе
							СтруктураСвойстваРезультат = СтруктураСвойства;
						КонецЕсли;
						
						ИзменитьСвойствоЭлемента(ПараметрыОбработки, Элемент, ИмяЭлемента, Родитель
							,ЭлементСоответствия.Ключ, ПолучитьЗначениеJSON(ЭлементСоответствия.Значение)
							,СтруктураСвойстваРезультат, СтруктураДействия, СтруктураОперации);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЭлементСтруктуры Из СтруктураЗависимыеСвойства Цикл
					СтруктураСвойства.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				КонецЦикла;
				
				ПрименитьИзмененияЭлемента(Форма, ПараметрыОбработки, Элемент, ИмяЭлемента, Родитель, ИмяРодителя
					,СтруктураСвойства, СтруктураДействия, СтруктураОперации, КэшРеквизиты);
					
				ПодчиненныеЭлементы = ЭлементКоллекции[""];
				Если ПодчиненныеЭлементы <> Неопределено Тогда
					ИзменитьЭлементы(ПараметрыОбработки, ПодчиненныеЭлементы, ИмяЭлемента);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ШиринаИмени = Неопределено Тогда
			// расчет ширины имени
			ШиринаИмени = 0;
			Для Инд = 1 По МакетИзменений.ШиринаТаблицы Цикл
				Если МакетИзменений.Область(1, Инд).Текст = "Имя" Тогда
					ШиринаИмени = Инд;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИмяЭлемента = МакетИзменений.Область(НомСтроки, НомКолонки).Текст;
		Если НЕ ЗначениеЗаполнено(ИмяЭлемента) Тогда
			Возврат;
		КонецЕсли;
		
		Пока Истина Цикл
			ЗаполнитьПараметры(ПараметрыОбработки, ИмяЭлемента);
			
			Если Найти(ИмяЭлемента, "(") Тогда
				ПрименитьШаблон(ПараметрыОбработки, "Элементы", ИмяЭлемента, ИмяРодителя);
			Иначе
				Если Найти(ИмяЭлемента, "%") > 0 Тогда
					ТекЭлементРодитель = Родитель;
					Пока ТипЗнч(ТекЭлементРодитель) = Тип("ГруппаФормы") Цикл
						ТекЭлементРодитель = ТекЭлементРодитель.Родитель;
					КонецЦикла;
					
					ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "%", ТекЭлементРодитель.Имя);
				КонецЕсли;
				
				Если ИмяЭлемента = "Форма" Тогда
					Элемент = Форма;
				Иначе
					Элемент = Форма.Элементы.Найти(ИмяЭлемента);
				КонецЕсли;
				
				СтруктураСвойства = Новый Структура;
				СтруктураЗависимыеСвойства = Новый Структура;
				СтруктураДействия = Новый Структура;
				СтруктураОперации = Новый Структура;
				Для Инд = ШиринаИмени + 1 По МакетИзменений.ШиринаТаблицы Цикл
					Если ЗначениеЗаполнено(МакетИзменений.Область(НомСтроки, Инд).Текст) Тогда
						ИмяСвойства = МакетИзменений.Область(1, Инд).Текст;
						ОписаниеЗначения = МакетИзменений.Область(НомСтроки, Инд).Текст;
					
						Если ПараметрыОбработки.ЗависимыеСвойстваЭлементов[ИмяСвойства] <> Неопределено Тогда
							СтруктураСвойстваРезультат = СтруктураЗависимыеСвойства;
						Иначе
							СтруктураСвойстваРезультат = СтруктураСвойства;
						КонецЕсли;
						
						ИзменитьСвойствоЭлемента(ПараметрыОбработки, Элемент, ИмяЭлемента, Родитель
							,ИмяСвойства, ОписаниеЗначения
							,СтруктураСвойстваРезультат, СтруктураДействия, СтруктураОперации);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЭлементСтруктуры Из СтруктураЗависимыеСвойства Цикл
					СтруктураСвойства.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				КонецЦикла;

				ПрименитьИзмененияЭлемента(Форма, ПараметрыОбработки, Элемент, ИмяЭлемента, Родитель, ИмяРодителя
					,СтруктураСвойства, СтруктураДействия, СтруктураОперации, КэшРеквизиты);
			КонецЕсли;
			
			НомСтроки = НомСтроки + 1;
			Если НомСтроки > МакетИзменений.ВысотаТаблицы Тогда
				Прервать;
			КонецЕсли;
			
			ТекстЯчейки = МакетИзменений.Область(НомСтроки, НомКолонки).Текст;
			Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
				Если НомКолонки < ШиринаИмени Тогда
					ИзменитьЭлементы(ПараметрыОбработки, МакетИзменений, ИмяЭлемента, ШиринаИмени, НомСтроки, НомКолонки + 1);
				КонецЕсли;
				
				ТекстЯчейки = МакетИзменений.Область(НомСтроки, НомКолонки).Текст;
				Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			ИмяЭлемента = ТекстЯчейки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьСвойствоЭлемента(ПараметрыОбработки, Элемент, ИмяЭлемента, Родитель, ИмяСвойства, Знач ОписаниеЗначения, СтруктураСвойства, СтруктураДействия, СтруктураОперации)
	ЗаполнитьПараметры(ПараметрыОбработки, ОписаниеЗначения);
	
	Поз = Найти(ИмяСвойства, "[");
	Если Поз > 0 Тогда
		ИмяДействия = ПолучитьСодержимое(ИмяСвойства, Поз, "]");
		Если ОписаниеЗначения = "%" Тогда
			Если ИмяЭлемента = "Форма" Тогда
				ОписаниеЗначения = ИмяДействия;
			Иначе
				ОписаниеЗначения = ИмяЭлемента + ИмяДействия;
			КонецЕсли;
		ИначеЕсли Найти(ОписаниеЗначения, "%") > 0 Тогда
			ОписаниеЗначения = СтрЗаменить(ОписаниеЗначения, "%", ИмяДействия);
		КонецЕсли;
		
		Если СтруктураДействия.Свойство(ИмяДействия) Тогда
			ВызватьИсключение СтрШаблон("Обнаружено повторное указание обработчика события %1 элемента %2"
				,ИмяДействия, ИмяЭлемента);
		Иначе
			СтруктураДействия.Вставить(ИмяДействия, ОписаниеЗначения);
		КонецЕсли;
	Иначе
		Поз = Найти(ИмяСвойства, "(");
		Если Поз > 0 Тогда
			ИмяОбработчика = Лев(ИмяСвойства, Поз - 1);
			ИмяПараметра = ПолучитьСодержимое(ИмяСвойства, Поз);
			Если НЕ ЗначениеЗаполнено(ИмяПараметра) Тогда
				ИмяПараметра = ИмяОбработчика;
			КонецЕсли;
			
			Если Найти(ОписаниеЗначения, "%") > 0
				И (ИмяОбработчика = "МестоРасположения"
					ИЛИ ИмяОбработчика = "Вместо"
					ИЛИ ИмяОбработчика = "СвязьПоТипу") Тогда
				
				ТекЭлементРодитель = Родитель;
				Пока ТипЗнч(ТекЭлементРодитель) = Тип("ГруппаФормы") Цикл
					ТекЭлементРодитель = ТекЭлементРодитель.Родитель;
				КонецЦикла;
				
				Если ИмяОбработчика = "СвязьПоТипу" Тогда
					ОписаниеЗначения = СтрЗаменить(ОписаниеЗначения, "%", ТекЭлементРодитель.ПутьКДанным);
				Иначе
					ОписаниеЗначения = СтрЗаменить(ОписаниеЗначения, "%", ТекЭлементРодитель.Имя);
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяОбработчика = "МестоРасположения"
				ИЛИ ИмяОбработчика = "Родитель"
				ИЛИ ИмяОбработчика = "Вместо"
				ИЛИ ИмяОбработчика = "Скрыта"
				ИЛИ ИмяОбработчика = "СписокВыбора" Тогда
				
				СтруктураОперации.Вставить(ИмяОбработчика, ОписаниеЗначения);
				
			ИначеЕсли ЗначениеЗаполнено(ИмяОбработчика) Тогда
				ТекущееЗначение = ?(Элемент <> Неопределено, Элемент[ИмяПараметра], Неопределено);
				Результат = ВычислитьЗначениеНастройки(ПараметрыОбработки, ИмяОбработчика, ОписаниеЗначения, ТекущееЗначение);
			Иначе
				Результат = Вычислить(ОписаниеЗначения);
			КонецЕсли;
			
			Если СтруктураСвойства.Свойство(ИмяПараметра) Тогда
				ВызватьИсключение СтрШаблон("Обнаружено повторное указание свойства %1 элемента %2"
					,ИмяПараметра, ИмяЭлемента);
			Иначе
				СтруктураСвойства.Вставить(ИмяПараметра, Результат);
			КонецЕсли;
		Иначе
			Если Найти(ОписаниеЗначения, "%") > 0
				И ИмяСвойства = "ПутьКДанным" Тогда
				
				ТекЭлементРодитель = Родитель;
				Пока ТипЗнч(ТекЭлементРодитель) = Тип("ГруппаФормы") Цикл
					ТекЭлементРодитель = ТекЭлементРодитель.Родитель;
				КонецЦикла;
				
				ОписаниеЗначения = СтрЗаменить(ОписаниеЗначения, "%", ТекЭлементРодитель[ИмяСвойства]);
			КонецЕсли;
			
			Если СтруктураСвойства.Свойство(ИмяСвойства) Тогда
				ВызватьИсключение СтрШаблон("Обнаружено повторное указание свойства %1 элемента %2"
					,ИмяСвойства, ИмяЭлемента);
			Иначе
				СтруктураСвойства.Вставить(ИмяСвойства, ОписаниеЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПрименитьИзмененияЭлемента(Форма, ПараметрыОбработки, Элемент, ИмяЭлемента, Родитель, ИмяРодителя, СтруктураСвойства, СтруктураДействия, СтруктураОперации, КэшРеквизиты)
	Реквизит = Неопределено;
	Если Элемент = Неопределено Тогда
		Если СтруктураОперации.Свойство("Вместо") Тогда
			ИсходныйЭлемент = Форма.Элементы[СтруктураОперации.Вместо];
			Элемент = Форма.Элементы.Добавить(ИмяЭлемента, ТипЗнч(ИсходныйЭлемент), ИсходныйЭлемент.Родитель);
			
			Если СтруктураСвойства.Свойство("ПутьКДанным") Тогда
				Элемент.ПутьКДанным = СтруктураСвойства.ПутьКДанным;
			Иначе
				Элемент.ПутьКДанным = ИсходныйЭлемент.ПутьКДанным;
			КонецЕсли;
		Иначе
			Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип(СтруктураСвойства.Тип), Родитель);
		КонецЕсли;
		
		ПараметрыОбработки.ДобавленныеЭлементы.Вставить(ИмяЭлемента, Истина);
		
		Если СтруктураСвойства.Свойство("ПутьКДанным") Тогда
			Реквизит = ПолучитьРеквизитФормы(Форма, СтруктураСвойства.ПутьКДанным, КэшРеквизиты);
			СтруктураСвойства.ПутьКДанным = СтрЗаменить(СтруктураСвойства.ПутьКДанным, "/", ".");
		КонецЕсли;
		
		Если СтруктураОперации.Свойство("Вместо") Тогда
			ИсключаемыеСвойства = "";
			Для Каждого ЭлементСтруктуры Из СтруктураСвойства Цикл
				Если НЕ СтруктураОперации.Свойство(ЭлементСтруктуры.Ключ) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + "," + ЭлементСтруктуры.Ключ;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураСвойства.Удалить("ПутьКДанным");
				
			ИсключаемыеСвойства = ИсключаемыеСвойства + "," + ИсключаемыеСвойстваЭлемента(ПараметрыОбработки, ИсходныйЭлемент);
			
			ИсходныйЭлемент = Форма.Элементы[СтруктураОперации.Вместо];
			ЗаполнитьЗначенияСвойств(Элемент, ИсходныйЭлемент, , ИсключаемыеСвойства);
			Форма.Элементы.Переместить(Элемент, ИсходныйЭлемент.Родитель, ИсходныйЭлемент);
			
			Для Каждого Действие Из ДействияЭлемента(ПараметрыОбработки, ИсходныйЭлемент) Цикл
				ЗначениеДействия = ИсходныйЭлемент.ПолучитьДействие(Действие);
				Если ЗначениеЗаполнено(ЗначениеДействия) Тогда
					Элемент.УстановитьДействие(Действие, ЗначениеДействия);
				КонецЕсли;
			КонецЦикла;
			
			СкопироватьПодчиненныеЭлементы(Форма, ПараметрыОбработки, ИсходныйЭлемент, Элемент);
			ИсходныйЭлемент.Видимость = Ложь;

		ИначеЕсли Тип(СтруктураСвойства.Тип) = Тип("ПолеФормы") Тогда
			Если СтруктураСвойства.Свойство("Вид") Тогда
				Элемент.Вид = СтруктураСвойства.Вид;
			Иначе
				Если Реквизит <> Неопределено
					И Реквизит.ТипЗначения.Типы().Количество() = 1
					И Реквизит.ТипЗначения.Типы()[0] = Тип("Булево") Тогда
					
					Элемент.Вид = ВидПоляФормы.ПолеФлажка;
				Иначе
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Тип(СтруктураСвойства.Тип) = Тип("ДекорацияФормы") Тогда
			Если СтруктураСвойства.Свойство("Вид") Тогда
				Элемент.Вид = СтруктураСвойства.Вид;
			КонецЕсли;
					
		ИначеЕсли Тип(СтруктураСвойства.Тип) = Тип("ГруппаФормы") Тогда
			Если СтруктураСвойства.Свойство("Вид") Тогда
				Элемент.Вид = СтруктураСвойства.Вид;
			Иначе
				Если ИмяРодителя = Неопределено
					ИЛИ ИмяРодителя = "Форма"
					ИЛИ ТипЗнч(Форма.Элементы[ИмяРодителя]) = Тип("ГруппаФормы")
						И (Форма.Элементы[ИмяРодителя].Вид = ВидГруппыФормы.ОбычнаяГруппа
							ИЛИ Форма.Элементы[ИмяРодителя].Вид = ВидГруппыФормы.Страница) Тогда
					
					Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					Элемент.Отображение = ОтображениеОбычнойГруппы.Нет;
					Элемент.ОтображатьЗаголовок = Ложь;
					
				ИначеЕсли ТипЗнч(Форма.Элементы[ИмяРодителя]) = Тип("ТаблицаФормы") Тогда
					Элемент.Вид = ВидГруппыФормы.ГруппаКолонок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтруктураОперации.Свойство("СписокВыбора") Тогда
			Реквизит = ПолучитьРеквизитФормы(Форма, Элемент.ПутьКДанным, КэшРеквизиты);
		КонецЕсли;
			
		Если ИмяРодителя <> Неопределено
			И Элемент.Родитель <> Родитель Тогда
			
			Если ПараметрыОбработки.ДобавленныеЭлементы[ИмяРодителя] = Неопределено Тогда
				Если СтруктураОперации.Свойство("МестоРасположения") Тогда
					НовыйРодитель = Форма.Элементы[СтруктураОперации.МестоРасположения].Родитель;
				ИначеЕсли СтруктураОперации.Свойство("Родитель") Тогда
					Если СтруктураОперации.Родитель = "Форма" Тогда
						НовыйРодитель = Форма;
					Иначе
						НовыйРодитель = Форма.Элементы[СтруктураОперации.Родитель];
					КонецЕсли;
				Иначе
					НовыйРодитель = Неопределено;
				КонецЕсли;
				
				Если НовыйРодитель <> Родитель Тогда
					ВызватьИсключение СтрШаблон("Обнаружено неявное изменение родителя элемента %1 на %2. Ожидается %3"
						,ИмяЭлемента, ИмяРодителя, Элемент.Родитель.Имя);
				КонецЕсли;
			Иначе
				Форма.Элементы.Переместить(Элемент, Родитель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Элемент, СтруктураСвойства);
	
	Для Каждого ЭлементСтруктуры Из СтруктураОперации Цикл
		Если ЭлементСтруктуры.Ключ = "МестоРасположения" Тогда
			Если СтруктураОперации.Свойство("Родитель") Тогда
				НовыйРодитель = Форма.Элементы[СтруктураОперации.Родитель];
			Иначе
				НовыйРодитель = Элемент.Родитель;
			КонецЕсли;

			СледующийЭлемент = Форма.Элементы[ЭлементСтруктуры.Значение];
			Если НовыйРодитель <> СледующийЭлемент.Родитель
				И ПолучитьПодчиненныеЭлементы(НовыйРодитель).Найти(СледующийЭлемент) <> Неопределено Тогда
				
				НовыйРодитель = СледующийЭлемент.Родитель;
			КонецЕсли;
				
			Форма.Элементы.Переместить(Элемент, НовыйРодитель, СледующийЭлемент);
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Родитель"
			И НЕ СтруктураОперации.Свойство("МестоРасположения") Тогда
			
			Если ЭлементСтруктуры.Значение = "Форма" Тогда
				НовыйРодитель = Форма;
			Иначе
				НовыйРодитель = Форма.Элементы[ЭлементСтруктуры.Значение];
			КонецЕсли;
			
			Если Элемент.Родитель <> НовыйРодитель Тогда
				Форма.Элементы.Переместить(Элемент, НовыйРодитель);
			КонецЕсли;
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Скрыта" Тогда
			Если Вычислить(ЭлементСтруктуры.Значение) = Истина Тогда
				Элемент.Скрыть();
			Иначе
				Элемент.Показать();
			КонецЕсли;
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "СписокВыбора" Тогда
			Если Реквизит.ТипЗначения.Типы().Количество() = 1 Тогда
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(Реквизит.ТипЗначения.Типы()[0]);
				Если МетаданныеРеквизита <> Неопределено Тогда
					МассивИмена = СтрРазделить(ЭлементСтруктуры.Значение, ",");
					
					ДобавляемыеПеред = Новый Массив;
					ДобавляемыеПосле = Новый Массив;
					Удаляемые = Новый Соответствие;
					
					Добавляемые = ДобавляемыеПеред;
					Для Инд = 1 По МассивИмена.Количество() Цикл
						ИмяТекущего = СокрЛП(МассивИмена[Инд - 1]);
						Если ИмяТекущего = "*" Тогда
							Добавляемые = ДобавляемыеПосле;
							
						ИначеЕсли СтрНачинаетсяС(ИмяТекущего, "-") Тогда
							Удаляемые.Вставить(ПредопределенноеЗначение(МетаданныеРеквизита.ПолноеИмя() + "." + Сред(ИмяТекущего, 2)), Истина);
						Иначе
							Если СтрНачинаетсяС(ИмяТекущего, "+") Тогда
								ИмяТекущего = Сред(ИмяТекущего, 2);
							КонецЕсли;
							
							Добавляемые.Добавить(ПредопределенноеЗначение(МетаданныеРеквизита.ПолноеИмя() + "." + ИмяТекущего));
						КонецЕсли;
					КонецЦикла;
					
					Если Добавляемые = ДобавляемыеПеред Тогда
						Элемент.СписокВыбора.Очистить();
					Иначе
						МаксИнд = Элемент.СписокВыбора.Количество();
						Для Инд = 1 По МаксИнд Цикл
							Если Удаляемые[Элемент.СписокВыбора[МаксИнд - Инд].Значение] <> Неопределено Тогда
								Элемент.СписокВыбора.Удалить(МаксИнд - Инд);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Для Инд = 1 По ДобавляемыеПеред.Количество() Цикл
						Элемент.СписокВыбора.Вставить(Инд - 1, ДобавляемыеПеред[Инд - 1]);
					КонецЦикла;
					
					Для Каждого Значение Из ДобавляемыеПосле Цикл
						Элемент.СписокВыбора.Добавить(Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СтруктураДействия Цикл
		ИмяОбработчика = Элемент.ПолучитьДействие(ЭлементСтруктуры.Ключ);
		Если ЗначениеЗаполнено(ИмяОбработчика)
			И ЭлементСтруктуры.Значение <> ИмяОбработчика Тогда
			
			ВызватьИсключение СтрШаблон("Обнаружено изменение существующего обработчика события %1 элемента %2"
				,ЭлементСтруктуры.Ключ, Элемент.Имя);
		Иначе
			Элемент.УстановитьДействие(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СкопироватьПодчиненныеЭлементы(Форма, ПараметрыОбработки, ИсходныйЭлемент, Элемент, ПарамИсходнаяТаблица = Неопределено, ПарамТаблица = Неопределено)
	Если ТипЗнч(ИсходныйЭлемент) = Тип("ТаблицаФормы") Тогда
		СкопироватьПодчиненныеЭлементы(Форма, ПараметрыОбработки, ИсходныйЭлемент.КоманднаяПанель, Элемент.КоманднаяПанель);
		СкопироватьПодчиненныеЭлементы(Форма, ПараметрыОбработки, ИсходныйЭлемент.КонтекстноеМеню, Элемент.КонтекстноеМеню);
	КонецЕсли;
	
	Если ПарамИсходнаяТаблица = Неопределено
		И ТипЗнч(ИсходныйЭлемент) = Тип("ТаблицаФормы") Тогда
		
		ИсходнаяТаблица = ИсходныйЭлемент;
	Иначе
		ИсходнаяТаблица = ПарамИсходнаяТаблица;
	КонецЕсли;
	
	Если ИсходнаяТаблица <> Неопределено Тогда
		ИсходныйРодитель = ИсходнаяТаблица;
	Иначе
		ИсходныйРодитель = ИсходныйЭлемент;
	КонецЕсли;
	
	Если ПарамТаблица = Неопределено
		И ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
		
		Таблица = Элемент;
	Иначе
		Таблица = ПарамТаблица;
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		Родитель = Таблица;
	Иначе
		Родитель = Элемент;
	КонецЕсли;
	
	Если ТипЗнч(ИсходныйЭлемент) = Тип("ТаблицаФормы")
		ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаФормы") Тогда
		
		Для Каждого ПодчиненныйЭлемент Из ИсходныйЭлемент.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы")
					И ЗначениеЗаполнено(ПодчиненныйЭлемент.ИмяКоманды)
				ИЛИ ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
					И ИсходнаяТаблица = Неопределено Тогда
				
				Форма.Элементы.Переместить(ПодчиненныйЭлемент, Элемент);
				
			ИначеЕсли НЕ ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы") Тогда
				Если СтрНачинаетсяС(ПодчиненныйЭлемент.Имя, ИсходныйРодитель.Имя)
					И (ТипЗнч(ПодчиненныйЭлемент) <> Тип("ПолеФормы")
						ИЛИ СтрНачинаетсяС(ПодчиненныйЭлемент.ПутьКДанным, ИсходныйРодитель.ПутьКДанным)) Тогда
						
					ИмяЭлемента = Сред(ПодчиненныйЭлемент.Имя, СтрДлина(ИсходныйРодитель.Имя) + 1);
					НовыйЭлемент = Форма.Элементы.Добавить(Родитель.Имя + ИмяЭлемента, ТипЗнч(ПодчиненныйЭлемент), Элемент);
					
					Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
						ИмяРеквизита = Сред(ПодчиненныйЭлемент.ПутьКДанным, СтрДлина(ИсходныйРодитель.ПутьКДанным) + 2);
						НовыйЭлемент.ПутьКДанным = Родитель.ПутьКДанным + "." + ИмяРеквизита;
					КонецЕсли;

					ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПодчиненныйЭлемент, , ИсключаемыеСвойстваЭлемента(ПараметрыОбработки, ПодчиненныйЭлемент));
					Для Каждого Действие Из ДействияЭлемента(ПараметрыОбработки, ПодчиненныйЭлемент) Цикл
						ЗначениеДействия = ПодчиненныйЭлемент.ПолучитьДействие(Действие);
						Если ЗначениеЗаполнено(ЗначениеДействия) Тогда
							НовыйЭлемент.УстановитьДействие(Действие, ЗначениеДействия);
						КонецЕсли;
					КонецЦикла;
					
					СкопироватьПодчиненныеЭлементы(Форма, ПараметрыОбработки, ПодчиненныйЭлемент, НовыйЭлемент, ИсходнаяТаблица, Таблица);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ДействияЭлемента(ПараметрыОбработки, Элемент)
	Если НЕ ПараметрыОбработки.Свойство("ДействияЭлементов") Тогда
		Действия = Новый Соответствие;
		Действия.Вставить(Тип("ПолеФормы"), СтрРазделить("ПриИзменении,АвтоПодбор,ИзменениеТекстаРедактирования,НачалоВыбора,НачалоВыбораИзСписка,ОбработкаВыбора,ОкончаниеВводаТекста"
			+ ",Открытие,Очистка,Регулирование,Создание", ","));
		Действия.Вставить(Тип("ГруппаФормы"), СтрРазделить("ПриСменеСтраницы", ","));
		Действия.Вставить(Тип("ТаблицаФормы"), СтрРазделить("Выбор,ВыборЗначения,НачалоПеретаскивания,ОбработкаВыбора,ОбработкаЗаписиНового,ОбработкаЗапросаОбновления"
			+ ",ОкончаниеПеретаскивания,ПередНачаломДобавления,ПередНачаломИзменения,ПередОкончаниемРедактирования,ПередРазворачиванием,ПередСворачиванием,ПередУдалением"
			+ ",Перетаскивание,ПослеУдаления,ПриАктивизацииПоля,ПриАктивизацииСтроки,ПриАктивизацииЯчейки,ПриИзменении,ПриНачалеРедактирования,ПриОкончанииРедактирования"
			+ ",ПриСменеТекущегоРодителя,ПроверкаПеретаскивания", ","));
		Действия.Вставить(Тип("ДекорацияФормы"), СтрРазделить("Нажатие,НачалоПеретаскивания,ОкончаниеПеретаскивания,Перетаскивание,ПроверкаПеретаскивания,ОбработкаНавигационнойСсылки", ","));
		Действия.Вставить(Тип("КнопкаФормы"), Новый Массив);
			
		ПараметрыОбработки.Вставить("ДействияЭлементов", Действия);
	Иначе
		Действия = ПараметрыОбработки.ДействияЭлементов;
	КонецЕсли;
	
	Возврат Действия[ТипЗнч(Элемент)];
КонецФункции

Функция ИсключаемыеСвойстваЭлемента(ПараметрыОбработки, Элемент)
	Если НЕ ПараметрыОбработки.Свойство("ИсключаемыеСвойстваЭлементов") Тогда
		ИсключаемыеСвойства = Новый Соответствие;
		ИсключаемыеСвойства.Вставить(Тип("ПолеФормы"), "Имя,ПутьКДанным");
		ИсключаемыеСвойства.Вставить(Тип("ГруппаФормы"), "Имя");
		ИсключаемыеСвойства.Вставить(Тип("ТаблицаФормы"), "Имя,ДополнительныеПараметрыСоздания");
		ИсключаемыеСвойства.Вставить(Тип("ДекорацияФормы"), "Имя");
		ИсключаемыеСвойства.Вставить(Тип("КнопкаФормы"), "Имя,ИмяКоманды");
		
		ПараметрыОбработки.Вставить("ИсключаемыеСвойстваЭлементов", ИсключаемыеСвойства);
	Иначе
		ИсключаемыеСвойства = ПараметрыОбработки.ИсключаемыеСвойстваЭлементов;
	КонецЕсли;
	
	Результат = ИсключаемыеСвойства[ТипЗнч(Элемент)];
	Если ТипЗнч(Элемент) = Тип("ПолеФормы")
		И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		
		Результат = Результат + ",ВыделенныйТекст,ТекстРедактирования";
		
	ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы")
		И Элемент.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
		
		Результат = Результат + ",ПутьКДаннымШапки";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура БлокировкаИзменения(Форма, ПризнакБлокировки) Экспорт
	ИмяДопРеквизита = СоздатьДопРеквизитПриНеобходимости(Форма);
	
	Если ПризнакБлокировки Тогда
		Если НЕ ЗначениеЗаполнено(Форма[ИмяДопРеквизита]) Тогда
			Форма[ИмяДопРеквизита] = "Заблокировано";
		КонецЕсли;
	Иначе
		Если Форма[ИмяДопРеквизита] = "Заблокировано" Тогда
			Форма[ИмяДопРеквизита] = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВычислитьЗначениеНастройки(ПараметрыОбработки, ИмяДействия, ТекстОписание, ТекущееЗначение = Неопределено)
	Если ИмяДействия = "ПараметрыВыбора" Тогда
		СоответствиеПараметры = Новый Соответствие;
		Если ТекущееЗначение <> Неопределено Тогда
			Для Каждого ПараметрВыбора Из ТекущееЗначение Цикл
				СоответствиеПараметры.Вставить(ПараметрВыбора.Имя, ПараметрВыбора);	
			КонецЦикла;
		КонецЕсли;
		
		ДобавлятьТекущиеПараметры = Ложь;
		МассивПараметры = Новый Массив;
		Для Каждого Описание Из ПолучитьМассивОписаний(ТекстОписание) Цикл
			Поз = Найти(Описание, "(");
			Если Поз > 0 Тогда
				ИмяПараметра = Лев(Описание, Поз - 1);
			Иначе
				ИмяПараметра = Описание;
			КонецЕсли;
			
			Если ИмяПараметра = "*" Тогда
				ДобавлятьТекущиеПараметры = Истина;
				
			ИначеЕсли Лев(ИмяПараметра, 1) = "-" Тогда
				СоответствиеПараметры.Удалить(Сред(ИмяПараметра, 2));
			Иначе
				Если Лев(ИмяПараметра, 1) = "+" Тогда
					ИмяПараметра = Сред(ИмяПараметра, 2);
				КонецЕсли;
				
				СоответствиеПараметры.Удалить(ИмяПараметра);

				ЗначениеПараметра = Вычислить(ПолучитьСодержимое(Описание, Поз));
				Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
					ЗначениеПараметра = Новый ФиксированныйМассив(ЗначениеПараметра);
				КонецЕсли;
				
				МассивПараметры.Добавить(Новый ПараметрВыбора(ИмяПараметра, ЗначениеПараметра));
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавлятьТекущиеПараметры Тогда
			Инд = 0;
			Для Каждого ЭлементСоответствия Из СоответствиеПараметры Цикл
				МассивПараметры.Вставить(Инд, ЭлементСоответствия.Значение);
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		
		Возврат Новый ФиксированныйМассив(МассивПараметры);
		
	ИначеЕсли ИмяДействия = "СвязиПараметровВыбора" Тогда
		СоответствиеСвязи = Новый Соответствие;
		Если ТекущееЗначение <> Неопределено Тогда
			Для Каждого СвязьПараметров Из ТекущееЗначение Цикл
				СоответствиеСвязи.Вставить(СвязьПараметров.Имя, СвязьПараметров);	
			КонецЦикла;
		КонецЕсли;
		
		ДобавлятьТекущиеСвязи = Ложь;
		МассивСвязи = Новый Массив;
		Для Каждого Описание Из ПолучитьМассивОписаний(ТекстОписание) Цикл
			Поз = Найти(Описание, "(");
			Если Поз > 0 Тогда
				ИмяПараметра = Лев(Описание, Поз - 1);
			Иначе
				ИмяПараметра = Описание;
			КонецЕсли;
			
			Если ИмяПараметра = "*" Тогда
				ДобавлятьТекущиеСвязи = Истина;
			
			ИначеЕсли Лев(ИмяПараметра, 1) = "-" Тогда
				СоответствиеСвязи.Удалить(Сред(ИмяПараметра, 2));
			Иначе
				Если Лев(ИмяПараметра, 1) = "+" Тогда
					ИмяПараметра = Сред(ИмяПараметра, 2);
				КонецЕсли;
				СоответствиеСвязи.Удалить(ИмяПараметра);
				
				ЗначениеСвязи = ПолучитьСодержимое(Описание, Поз);
				МассивСвязи.Добавить(Новый СвязьПараметраВыбора(ИмяПараметра, ЗначениеСвязи));
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавлятьТекущиеСвязи Тогда
			Инд = 0;
			Для Каждого ЭлементСоответствия Из СоответствиеСвязи Цикл
				МассивСвязи.Вставить(Инд, ЭлементСоответствия.Значение);
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		
		Возврат Новый ФиксированныйМассив(МассивСвязи);
		
	ИначеЕсли ИмяДействия = "ОписаниеТипов" Тогда
		Возврат ПолучитьОписаниеТиповИзСтроки(ТекстОписание);
		
	ИначеЕсли ИмяДействия = "СвязьПоТипу" Тогда
		Возврат ПолучитьСвязьПоТипуИзСтроки(ТекстОписание);
		
	ИначеЕсли ИмяДействия = "ОбработатьТекст" Тогда
		ИмяМакета = "ОТ_" + СтрЗаменить(ТекстОписание, ".", "_");
		НовоеЗначение = ТекущееЗначение;
		
		Если ТипЗнч(ПараметрыОбработки.ДанныеМакета) = Тип("Соответствие") Тогда
			Для Каждого ЭлементКоллекции Из ПараметрыОбработки.ДанныеМакета[ИмяМакета] Цикл
				ОбработатьТекст(НовоеЗначение
					,ПолучитьЗначениеJSON(ЭлементКоллекции["Маркер"])
					,ПолучитьЗначениеJSON(ЭлементКоллекции["Текст"])
					,ЭлементКоллекции["Счетчик"]);
			КонецЦикла;
		Иначе
			МакетИзменений = ПараметрыОбработки.ДанныеМакета.ПолучитьОбласть(ИмяМакета);
			
			Для НомСтроки = 2 По МакетИзменений.ВысотаТаблицы Цикл
				Маркер = МакетИзменений.Область(НомСтроки, 1).Текст;
				Если НЕ ЗначениеЗаполнено(Маркер) Тогда
					Прервать;
				КонецЕсли;
				
				Текст = МакетИзменений.Область(НомСтроки, 2).Текст;
				Счетчик = МакетИзменений.Область(НомСтроки, 3).Текст;
				
				ОбработатьТекст(НовоеЗначение, Маркер, Текст, Счетчик);
			КонецЦикла;
		КонецЕсли;
		
		Возврат НовоеЗначение;
		
	ИначеЕсли ИмяДействия = "ОпределяемыйТип" Тогда
		Возврат Метаданные.ОпределяемыеТипы[ТекстОписание].Тип;
		
	ИначеЕсли ИмяДействия = "Характеристика" Тогда
		Возврат Метаданные.ПланыВидовХарактеристик[ТекстОписание].Тип;
	ИначеЕсли ИмяДействия = "ТипМетаданных" Тогда
		Возврат ПолучитьТипМетаданных(ТекстОписание, ПараметрыОбработки.Форма.ИмяФормы);
	Иначе
		Возврат Вычислить(ИмяДействия + "." + ТекстОписание);
	КонецЕсли;
КонецФункции

Процедура ОбработатьТекст(ТекстДляОбработки, Маркер, Текст, Счетчик)
	ЕстьВставка = (Найти(Маркер, "##") > 0);
	Если ЕстьВставка Тогда
		ТекстПоиска = СтрЗаменить(Маркер, "##", "");
		
		Если СтрЧислоВхождений(ТекстДляОбработки, ТекстПоиска) <> 1 Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно установить место вставки фрагмента'");	
		КонецЕсли;
		
		ТекстЗамены = СтрЗаменить(Маркер, "##", Текст);
		
		ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, ТекстПоиска, ТекстЗамены);
	Иначе
		Если СтрЧислоВхождений(ТекстДляОбработки, Маркер) <> ?(ЗначениеЗаполнено(Счетчик), Число(Счетчик), 1) Тогда
			ВызватьИсключение НСтр("ru = 'Количество фрагментов для замены отличается от ожидаемого'");
		КонецЕсли;
		
		ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, Маркер, Текст);
	КонецЕсли;
КонецПроцедуры

Процедура ИнициализироватьОграничениеИзмененияРеквизитов(Форма) Экспорт
	ИмяДопРеквизита = "МОД_ОграничениеИзмененияРеквизитов_Параметры";
	
	СтруктураЗначения = Новый Структура(ИмяДопРеквизита);
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, Форма);

	Если СтруктураЗначения[ИмяДопРеквизита] = Неопределено Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяДопРеквизита, Новый ОписаниеТипов("ТаблицаЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяЭлемента", Новый ОписаниеТипов("Строка"), ИмяДопРеквизита));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяСвойства", Новый ОписаниеТипов("Строка"), ИмяДопРеквизита));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначениеОграничения", Новый ОписаниеТипов("Булево"), ИмяДопРеквизита));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначениеОтмены", Новый ОписаниеТипов("Булево"), ИмяДопРеквизита));
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМакетИзменений(Форма) Экспорт
	Перем МакетИзменений;
	
	ПрефиксМакета = "МОД_Модификация_";
	
	МассивПуть = СтрРазделить(Форма.ИмяФормы, ".");
	Если МассивПуть.Количество() = 4 Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(МассивПуть[0] + "." + МассивПуть[1]);
		Если ОбъектМетаданных <> Неопределено Тогда
			Если ОбъектМетаданных.Макеты.Найти(ПрефиксМакета + МассивПуть[3]) <> Неопределено Тогда
				МенеджерОбъекта = МенеджерПоПолномуИмени(МассивПуть[0] + "." + МассивПуть[1]);
				МакетИзменений = МенеджерОбъекта.ПолучитьМакет(ПрефиксМакета + МассивПуть[3]);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли МассивПуть.Количество() = 2 Тогда
		Если Метаданные.ОбщиеМакеты.Найти(ПрефиксМакета + МассивПуть[1]) <> Неопределено Тогда
			МакетИзменений = ПолучитьОбщийМакет(ПрефиксМакета + МассивПуть[1]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МакетИзменений;
КонецФункции

Процедура ИзменитьФорму(Форма, МакетИзменений = Неопределено, ИмяШаблона = Неопределено
	,Парам1 = Неопределено, Парам2 = Неопределено, Парам3 = Неопределено, Парам4 = Неопределено, Парам5 = Неопределено) Экспорт
	
	СоответствиеПараметры = Новый Соответствие;
	Если Парам1 <> Неопределено Тогда
		СоответствиеПараметры.Вставить("%1", Парам1);
	КонецЕсли;
	Если Парам2 <> Неопределено Тогда
		СоответствиеПараметры.Вставить("%2", Парам2);
	КонецЕсли;
	Если Парам3 <> Неопределено Тогда
		СоответствиеПараметры.Вставить("%3", Парам3);
	КонецЕсли;
	Если Парам4 <> Неопределено Тогда
		СоответствиеПараметры.Вставить("%4", Парам4);
	КонецЕсли;
	Если Парам5 <> Неопределено Тогда
		СоответствиеПараметры.Вставить("%5", Парам5);
	КонецЕсли;
	
	ИмяРодителя = Неопределено;
	Если ТипЗнч(МакетИзменений) = Тип("ТабличныйДокумент") Тогда
		ДанныеМакета = МакетИзменений;
	
	ИначеЕсли ТипЗнч(МакетИзменений) = Тип("ТекстовыйДокумент") Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(МакетИзменений.ПолучитьТекст());
		ДанныеМакета = ПрочитатьJSON(ЧтениеJSON, Истина);

	ИначеЕсли МакетИзменений = Неопределено Тогда
		МакетШаблона = МакетСтандартногоШаблона(ИмяШаблона, ИмяРодителя, СоответствиеПараметры);
		Если МакетШаблона = Неопределено Тогда
			ВызватьИсключение СтрШаблон("Неизвестное имя стандартного шаблона %1", ИмяШаблона);
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(МакетШаблона);
		ДанныеМакета = ПрочитатьJSON(ЧтениеJSON, Истина);
	КонецЕсли;
	
	ЗависимыеСвойстваЭлементов = Новый Соответствие;
	ЗависимыеСвойстваЭлементов.Вставить("ПутьКДаннымКартинкиСтроки", Истина);
	
	ПараметрыОбработки = Новый Структура("Форма,ДанныеМакета,ДобавленныеЭлементы,ЗависимыеСвойстваЭлементов"
		,Форма
		,ДанныеМакета
		,Новый Соответствие
		,ЗависимыеСвойстваЭлементов);
		
	Если ЗначениеЗаполнено(СоответствиеПараметры) Тогда
		ПараметрыОбработки.Вставить("Параметры", СоответствиеПараметры);
	КонецЕсли;
	
	Если ИмяШаблона <> Неопределено
		И МакетИзменений <> Неопределено Тогда
		
		Суффикс = "_" + ИмяШаблона;
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	ДанныеРаздела = Неопределено;
	Если ЕстьРаздел(ДанныеМакета, "Реквизиты" + Суффикс, ДанныеРаздела) Тогда
		ИзменитьРеквизиты(ПараметрыОбработки, ДанныеРаздела);
	КонецЕсли;
	
	Если ЕстьРаздел(ДанныеМакета, "Команды" + Суффикс, ДанныеРаздела) Тогда
		ИзменитьКоманды(ПараметрыОбработки, ДанныеРаздела);
	КонецЕсли;
	
	Если ЕстьРаздел(ДанныеМакета, "Элементы" + Суффикс, ДанныеРаздела) Тогда
		ИзменитьЭлементы(ПараметрыОбработки, ДанныеРаздела, ИмяРодителя);
	КонецЕсли;
КонецПроцедуры

Функция ЕстьРаздел(ДанныеМакета, ИмяРаздела, ДанныеРаздела)
	Если ТипЗнч(ДанныеМакета) = Тип("ТабличныйДокумент") Тогда
		Результат = (ДанныеМакета.Области.Найти(ИмяРаздела) <> Неопределено);
		Если Результат Тогда
			ДанныеРаздела = ДанныеМакета.ПолучитьОбласть(ИмяРаздела);
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ДанныеМакета) = Тип("Соответствие") Тогда
		ДанныеРаздела = ДанныеМакета[ИмяРаздела];
		Результат = (ДанныеРаздела <> Неопределено);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьПараметры(ПараметрыОбработки, Текст)
	Если ПараметрыОбработки.Свойство("Параметры") Тогда
		Для Каждого КлючИЗначение Из ПараметрыОбработки.Параметры Цикл
			Текст = СтрЗаменить(Текст, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПрименитьШаблон(ПараметрыОбработки, ТипШаблона, ТекстВызова, ИмяРодителя = Неопределено)
	Поз = Найти(ТекстВызова, "(");
	МассивОписаний = ПолучитьМассивОписаний(ПолучитьСодержимое(ТекстВызова, Поз));
	
	ПараметрыОбработкиШаблона = Новый Структура("Форма,ДанныеМакета,ДобавленныеЭлементы,ЗависимыеСвойстваЭлементов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбработкиШаблона, ПараметрыОбработки);
	
	СоответствиеПараметры = Новый Соответствие;
	Если ЗначениеЗаполнено(МассивОписаний) Тогда
		Для Инд = 1 По МассивОписаний.Количество() Цикл
			СоответствиеПараметры.Вставить("%" + Инд, Вычислить(МассивОписаний[Инд - 1]));
		КонецЦикла;
	КонецЕсли;
	
	ИмяШаблона = Лев(ТекстВызова, Поз - 1);
	Если ИмяРодителя <> Неопределено
		И ТипШаблона = "Элементы" Тогда
		
		Родитель = ПараметрыОбработки.Форма.Элементы[ИмяРодителя];
	Иначе
		Родитель = Неопределено;
	КонецЕсли;
	
	МакетШаблона = МакетСтандартногоШаблона(ИмяШаблона, Родитель, СоответствиеПараметры);
	Если МакетШаблона <> Неопределено Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(МакетШаблона);
		
		ДанныеМакета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ДанныеШаблона = ПолучитьРаздел(ДанныеМакета, ТипШаблона);
	Иначе
		ДанныеШаблона = ПолучитьРаздел(ПараметрыОбработки.ДанныеМакета, ТипШаблона + "_" + ИмяШаблона);
	КонецЕсли;

	Если ЗначениеЗаполнено(СоответствиеПараметры) Тогда
		ПараметрыОбработкиШаблона.Вставить("Параметры", СоответствиеПараметры);
	КонецЕсли;
	
	Если ТипШаблона = "Элементы" Тогда
		ИзменитьЭлементы(ПараметрыОбработкиШаблона, ДанныеШаблона, ИмяРодителя);
	ИначеЕсли ТипШаблона = "Реквизиты" Тогда
		ИзменитьРеквизиты(ПараметрыОбработкиШаблона, ДанныеШаблона, ИмяРодителя);
	ИначеЕсли ТипШаблона = "Команды" Тогда
		ИзменитьКоманды(ПараметрыОбработкиШаблона, ДанныеШаблона);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРеквизитФормы(Форма, ПутьКДанным, Кэш)
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Поз = Найти(ПутьКДанным, "/");
	Если Поз > 0 Тогда
		ПутьКРеквизиту = Лев(ПутьКДанным, Поз - 1);
		ПоляРеквизита = Сред(ПутьКДанным, Поз + 1);
	Иначе
		ПутьКРеквизиту = ПутьКДанным;
		ПоляРеквизита = "";
	КонецЕсли;
	
	ПутьКРеквизитуРаздельно = СтрЗаменить(ПутьКРеквизиту, ".", Символы.ПС);
	КоличествоРазделов = СтрЧислоСтрок(ПутьКРеквизитуРаздельно);
	Если КоличествоРазделов > 1 Тогда
		Имя = СтрПолучитьСтроку(ПутьКРеквизитуРаздельно, КоличествоРазделов);
		Префикс = Лев(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - СтрДлина(Имя) - 1);
	Иначе
		Имя = ПутьКРеквизиту;
		Префикс = "";
	КонецЕсли;
	
	СоответствиеРеквизиты = Кэш[Префикс];
	Если СоответствиеРеквизиты = Неопределено Тогда
		Если СтрНачинаетсяС(Префикс, "Элементы.") Тогда
			МассивПрефикс = СтрРазделить(Префикс, ".");
			ПрефиксПути = Форма.Элементы[МассивПрефикс[1]].ПутьКДанным;
		Иначе
			ПрефиксПути = Префикс;
		КонецЕсли;
			
		СоответствиеРеквизиты = Новый Соответствие;
		Для Каждого Реквизит Из Форма.ПолучитьРеквизиты(ПрефиксПути) Цикл
			СоответствиеРеквизиты.Вставить(Реквизит.Имя, Реквизит);
		КонецЦикла;
		
		Кэш.Вставить(Префикс, СоответствиеРеквизиты);
	КонецЕсли;
	
	Реквизит = Неопределено;
	Если ЗначениеЗаполнено(ПоляРеквизита) Тогда
		Если СоответствиеРеквизиты[Имя].ТипЗначения.Типы().Количество() = 1 Тогда
			ЕстьОшибки = Ложь;
			ОписаниеТипов = СоответствиеРеквизиты[Имя].ТипЗначения;
			
			ПоляРеквизитаРаздельно = СтрЗаменить(ПоляРеквизита, ".", Символы.ПС);
			Для Инд = 1 По СтрЧислоСтрок(ПоляРеквизитаРаздельно) Цикл
				Имя = СтрПолучитьСтроку(ПоляРеквизитаРаздельно, Инд);
				
				Если ОписаниеТипов.Типы().Количество() > 1 Тогда
					ЕстьОшибки = Истина;
					Прервать;
				КонецЕсли;
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеТипов.Типы()[0]);
				МетаданныеРеквизита = ОбъектМетаданных.Реквизиты.Найти(Имя);
				Если МетаданныеРеквизита = Неопределено Тогда
					Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
						Если СтандартныйРеквизит.Имя = Имя Тогда
							МетаданныеРеквизита = СтандартныйРеквизит;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ОписаниеТипов = МетаданныеРеквизита.Тип;
			КонецЦикла;
			
			Если НЕ ЕстьОшибки Тогда
				Реквизит = Новый Структура("ТипЗначения", ОписаниеТипов);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Реквизит = СоответствиеРеквизиты[Имя];
	КонецЕсли;
	
	Возврат Реквизит;
КонецФункции

Функция ПолучитьТипМетаданных(Знач ТекстОписание, ИмяФормы)
	Если Найти(ТекстОписание, "%") > 0 Тогда
		ПутьФормы = СтрРазделить(ИмяФормы, ".");
		ТекстОписание = СтрЗаменить(ТекстОписание, "%", ПутьФормы[0] + "." + ПутьФормы[1]);
	КонецЕсли;
	
	МассивПуть = СтрРазделить(ТекстОписание, ".");
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(МассивПуть[0] + "." + МассивПуть[1]);
	
	Если МассивПуть.Количество() = 2 Тогда
		Возврат ОбъектМетаданных.Тип;
	КонецЕсли;
		
	// уровень 3
	ИменаКоллекций = Новый Массив;
	ИменаКоллекций.Добавить("Реквизиты");
	Если Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Обработки.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Отчеты.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Тогда

		ИменаКоллекций.Добавить("ТабличныеЧасти");
	КонецЕсли;

	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		Тогда

		ИменаКоллекций.Добавить("Измерения");
		ИменаКоллекций.Добавить("Ресурсы");
	КонецЕсли;
	
	МетаданныеЭлемента = Неопределено;
	Для Каждого ИмяКоллекции Из ИменаКоллекций Цикл
		МетаданныеЭлемента = ОбъектМетаданных[ИмяКоллекции].Найти(МассивПуть[2]);
		Если МетаданныеЭлемента <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеЭлемента = Неопределено Тогда
		Для Каждого МетаданныеРеквизита Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			Если МетаданныеРеквизита.Имя = МассивПуть[2] Тогда
				МетаданныеЭлемента = МетаданныеРеквизита;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если МассивПуть.Количество() = 3 Тогда
		Возврат МетаданныеЭлемента.Тип;
	Иначе
		ОбъектМетаданных = МетаданныеЭлемента;
	КонецЕсли;
	
	// уровень 4
	МетаданныеЭлемента = ОбъектМетаданных.Реквизиты.Найти(МассивПуть[3]);
	Если МетаданныеЭлемента = Неопределено Тогда
		Для Каждого МетаданныеРеквизита Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			Если МетаданныеРеквизита.Имя = МассивПуть[3] Тогда
				МетаданныеЭлемента = МетаданныеРеквизита;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МетаданныеЭлемента.Тип;		
КонецФункции

Функция ПолучитьСвязьПоТипуИзСтроки(ТекстОписание)
	Поз = Найти(ТекстОписание, "(");
	Если Поз > 0 Тогда
		ПутьКДанным = Лев(ТекстОписание, Поз - 1);
		ЭлементСвязи = ПолучитьСодержимое(ТекстОписание, Поз);
		
		Возврат Новый СвязьПоТипу(ПутьКДанным, Число(ЭлементСвязи));
	Иначе
		Возврат Новый СвязьПоТипу(ТекстОписание);
	КонецЕсли;
КонецФункции

Функция ПолучитьЗначениеJSON(Значение)
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат СтрСоединить(Значение, Символы.ПС);
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

Функция МенеджерПоПолномуИмени(ПолноеИмя = Неопределено)
	МассивРезультат = Новый Массив;
	Если ПолноеИмя <> Неопределено Тогда
		ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
		КлассОМ = ВРег(ЧастиИмени[0]);
	Иначе
		ЧастиИмени = Новый Массив;
		КлассОМ = Неопределено;
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	Иначе
		ИмяОМ = Неопределено;
	КонецЕсли;
	
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ПЛАНОБМЕНА", ПланыОбмена);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "СПРАВОЧНИК", Справочники);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ДОКУМЕНТ", Документы);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ЖУРНАЛДОКУМЕНТОВ", ЖурналыДокументов, Ложь);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ПЕРЕЧИСЛЕНИЕ", Перечисления);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ОТЧЕТ", Отчеты, Ложь);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ОБРАБОТКА", Обработки, Ложь);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ПЛАНВИДОВХАРАКТЕРИСТИК", ПланыВидовХарактеристик);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ПЛАНСЧЕТОВ", ПланыСчетов);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ПЛАНВИДОВРАСЧЕТА", ПланыВидовРасчета);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "РЕГИСТРСВЕДЕНИЙ", РегистрыСведений, Ложь);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "РЕГИСТРНАКОПЛЕНИЯ", РегистрыНакопления, Ложь);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "РЕГИСТРБУХГАЛТЕРИИ", РегистрыБухгалтерии, Ложь);
	
	Если КлассОМ = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			МассивРезультат.Добавить(РегистрыРасчета);
			
		ИначеЕсли ЧастиИмени.Количество() = 4 Тогда
			Если ВРег(ЧастиИмени[2]) = "ПЕРЕРАСЧЕТ" Тогда
				МассивРезультат.Добавить(РегистрыРасчета[ИмяОМ].Перерасчеты);
				ИмяОМ = ЧастиИмени[3];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "БИЗНЕСПРОЦЕСС", БизнесПроцессы);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ЗАДАЧА", Задачи);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "КОНСТАНТА", Константы, Ложь);
	ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, "ПОСЛЕДОВАТЕЛЬНОСТЬ", Последовательности, Ложь);
	
	Если КлассОМ = Неопределено Тогда
		Для Каждого МетаданныеОбъекта Из Метаданные.ВнешниеИсточникиДанных Цикл
			МассивРезультат.Добавить(ВнешниеИсточникиДанных[МетаданныеОбъекта.Имя].Таблицы);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивРезультат.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект метаданных %1 не найден'"), ПолноеИмя);
	Иначе
		Если ИмяОМ <> Неопределено Тогда
			Возврат МассивРезультат[0][ИмяОМ];
			
		ИначеЕсли КлассОМ <> Неопределено Тогда
			Возврат МассивРезультат[0]	
			
		Иначе
			Возврат МассивРезультат;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ДобавитьМенеджерОбъектовМетаданных(МассивРезультат, КлассОМ, Имя, Менеджер, ЕстьСсылки = Истина)
	Если КлассОМ = Неопределено
		И ЕстьСсылки
		ИЛИ КлассОМ = Имя Тогда
		
		МассивРезультат.Добавить(Менеджер);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРаздел(ДанныеМакета, ИмяОбласти)
	Если ТипЗнч(ДанныеМакета) = Тип("ТабличныйДокумент") Тогда
		Возврат ДанныеМакета.ПолучитьОбласть(ИмяОбласти);
	ИначеЕсли ТипЗнч(ДанныеМакета) = Тип("Соответствие") Тогда
		Возврат ДанныеМакета[ИмяОбласти];
	КонецЕсли;
КонецФункции

Функция МакетСтандартногоШаблона(ИмяШаблона, Родитель = Неопределено, СоответствиеПараметры = Неопределено)
	Если ИмяШаблона = "_ОтборКомпоновкиДанных_" Тогда
		Если НЕ ЗначениеЗаполнено(СоответствиеПараметры)
			И Родитель <> Неопределено Тогда
				
			СоответствиеПараметры.Вставить("%1", Родитель.Имя);
			СоответствиеПараметры.Вставить("%2", Родитель.ПутьКДанным);
		
		ИначеЕсли ЗначениеЗаполнено(СоответствиеПараметры)
			И Родитель = Неопределено Тогда
				
			Родитель = СоответствиеПараметры["%1"];
		КонецЕсли;
		
		Возврат "{
		|	""Элементы"": [
		|		{
		|			""Имя"": ""%1Использование"",
		|			""Тип"": ""ПолеФормы"",
		|			""ПутьКДанным"": ""%2.Использование"",
		|			""ВидПоляФормы(Вид)"": ""ПолеФлажка"",
		|			""ПоложениеЗаголовкаЭлементаФормы(ПоложениеЗаголовка)"": ""Нет"",
		|		},
		|		{
		|			""Имя"": ""%1ГруппаКолонокОтбор"",
		|			""Тип"": ""ГруппаФормы"",
		|			""ВидГруппыФормы(Вид)"": ""ГруппаКолонок"",
		|			""ГруппировкаКолонок(Группировка)"": ""Вертикальная"",
		|			"""": [
		|				{
		|					""Имя"": ""%1ГруппаКолонокОсновныеЭлементыОтбора"",
		|					""Тип"": ""ГруппаФормы"",
		|					""ВидГруппыФормы(Вид)"": ""ГруппаКолонок"",
		|					""ГруппировкаКолонок(Группировка)"": ""Горизонтальная"",
		|					"""": [
		|						{
		|							""Имя"": ""%1ГруппаКолонокЛевоеЗначение"",
		|							""Тип"": ""ГруппаФормы"",
		|							""Заголовок"": ""Левое значение"",
		|							""ВидГруппыФормы(Вид)"": ""ГруппаКолонок"",
		|							""ГруппировкаКолонок(Группировка)"": ""ВЯчейке"",
		|							"""": [
		|								{
		|									""Имя"": ""%1КартинкаЛевогоЗначения"",
		|									""Тип"": ""ПолеФормы"",
		|									""ПутьКДанным"": ""%2.КартинкаЛевогоЗначения"",
		|									""ВидПоляФормы(Вид)"": ""ПолеКартинки"",
		|									""(ОтображатьВШапке)"": ""Ложь"",
		|								},
		|								{
		|									""Имя"": ""%1ЛевоеЗначение"",
		|									""Тип"": ""ПолеФормы"",
		|									""ПутьКДанным"": ""%2.ЛевоеЗначение"",
		|									""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|								},
		|							],
		|						},
		|						{
		|							""Имя"": ""%1ВидСравнения"",
		|							""Тип"": ""ПолеФормы"",
		|							""ПутьКДанным"": ""%2.ВидСравнения"",
		|							""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|						},
		|						{
		|							""Имя"": ""%1ГруппаКолонокПравоеЗначение"",
		|							""Тип"": ""ГруппаФормы"",
		|							""Заголовок"": ""Правое значение"",
		|							""ВидГруппыФормы(Вид)"": ""ГруппаКолонок"",
		|							""ГруппировкаКолонок(Группировка)"": ""ВЯчейке"",
		|							"""": [
		|								{
		|									""Имя"": ""%1КартинкаПравогоЗначения"",
		|									""Тип"": ""ПолеФормы"",
		|									""ПутьКДанным"": ""%2.КартинкаПравогоЗначения"",
		|									""ВидПоляФормы(Вид)"": ""ПолеКартинки"",
		|									""(ОтображатьВШапке)"": ""Ложь"",
		|								},
		|								{
		|									""Имя"": ""%1ПравоеЗначение"",
		|									""Тип"": ""ПолеФормы"",
		|									""ПутьКДанным"": ""%2.ПравоеЗначение"",
		|									""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|								},
		|							],
		|						},
		|						{
		|							""Имя"": ""%1Дата"",
		|							""Тип"": ""ПолеФормы"",
		|							""ПутьКДанным"": ""%2.Дата"",
		|							""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|						},
		|					],
		|				},
		|				{
		|					""Имя"": ""%1ТипГруппы"",
		|					""Тип"": ""ПолеФормы"",
		|					""ПутьКДанным"": ""%2.ТипГруппы"",
		|					""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|				},
		|			],
		|		},
		|		{
		|			""Имя"": ""%1ГруппаКолонокПрименение"",
		|			""Тип"": ""ГруппаФормы"",
		|			""ВидГруппыФормы(Вид)"": ""ГруппаКолонок"",
		|			""ГруппировкаКолонок(Группировка)"": ""Вертикальная"",
		|			"""": [
		|				{
		|					""Имя"": ""%1Применение"",
		|					""Тип"": ""ПолеФормы"",
		|					""ПутьКДанным"": ""%2.Применение"",
		|					""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|				},
		|				{
		|					""Имя"": ""%1РежимОтображения"",
		|					""Тип"": ""ПолеФормы"",
		|					""ПутьКДанным"": ""%2.РежимОтображения"",
		|					""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|				},
		|			],
		|		},
		|		{
		|			""Имя"": ""%1Представление"",
		|			""Тип"": ""ПолеФормы"",
		|			""ПутьКДанным"": ""%2.Представление"",
		|			""ВидПоляФормы(Вид)"": ""ПолеВвода"",
		|		},
		|	],
		|}";
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

#КонецЕсли

#Если Клиент Тогда
// Ограничение изменения реквизитов
// 
// Параметры:
// 	Форма - УправляемаяФорма
// 	ОписаниеОграничений - Строка - 
//						- Массив - 
Процедура ОграничитьИзменениеРеквизитов(Форма, ОписаниеОграничений = "") Экспорт
	ИмяДопРеквизита = "МОД_ОграничениеИзмененияРеквизитов_Параметры";
	
	ОтменитьОграничениеИзмененияРеквизитов(Форма);
	
	Если ТипЗнч(ОписаниеОграничений) = Тип("Массив") Тогда
		МассивОграничения = ОписаниеОграничений;
	Иначе
		МассивОграничения = СтрРазделить(ОписаниеОграничений, ",", Ложь);
	КонецЕсли;
		
	СоответствиеВключить = Новый Соответствие;
	СоответствиеИсключить = Новый Соответствие;
	Для Каждого Ограничение Из МассивОграничения Цикл
		Ограничение = ВРЕГ(СокрЛП(Ограничение));
		
		Если Лев(Ограничение, 1) = "+" Тогда
			СоответствиеВключить.Вставить(Сред(Ограничение, 2), Истина);
			
		ИначеЕсли Лев(Ограничение, 1) = "-" Тогда
			СоответствиеИсключить.Вставить(Сред(Ограничение, 2), Истина);
			
		Иначе
			СоответствиеВключить.Вставить(Ограничение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		ОграничитьИзменениеРеквизита(ЭлементФормы, СоответствиеВключить, СоответствиеИсключить, Форма[ИмяДопРеквизита], Форма)
	КонецЦикла;
КонецПроцедуры

Процедура ОграничитьИзменениеРеквизита(ЭлементФормы, СоответствиеВключить, СоответствиеИсключить, ТаблицаОграничения, Форма)
	Если ЭлементФормы = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	ИмяЭлемента = ВРЕГ(ЭлементФормы.Имя);
	
	МассивРодители = Новый Массив;
	ТекущийРодитель = ЭлементФормы.Родитель;
	Пока ТекущийРодитель <> Форма Цикл
		МассивРодители.Вставить(0, ТекущийРодитель.Имя);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
		ВключатьПоУмолчанию = ЗначениеЗаполнено(ЭлементФормы.ИмяКоманды)
				И НЕ Форма.Команды[ЭлементФормы.ИмяКоманды].ИзменяетСохраняемыеДанные
			ИЛИ НЕ ЗначениеЗаполнено(ЭлементФормы.ИмяКоманды)
				И НЕ МОД_МодификацияУправляемыхФормВызовСервераПовтИсп.КомандаИзменяетДанные(ЭлементФормы.Имя)
	Иначе
		ВключатьПоУмолчанию = Ложь;
	КонецЕсли;
	
	УстанавливатьОграничение = НЕ ВключитьРеквизит(МассивРодители, ИмяЭлемента, СоответствиеВключить, СоответствиеИсключить, ВключатьПоУмолчанию);
	
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы")
		ИЛИ ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И (ЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи
				ИЛИ ЭлементФормы.Вид = ВидПоляФормы.ПолеКартинки)
		ИЛИ ТипЗнч(ЭлементФормы) = Тип("ДекорацияФормы")
			И (ТипЗнч(ЭлементФормы.Родитель) = Тип("УправляемаяФорма")
				ИЛИ ЭлементФормы.Родитель.РасширеннаяПодсказка <> ЭлементФормы) Тогда
		
		Если УстанавливатьОграничение Тогда
			ДобавитьОграничение(ТаблицаОграничения, ЭлементФормы, "Доступность", Ложь);
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
		ИЛИ ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы")
			И ЭлементФормы.Вид <> ВидГруппыФормы.ОбычнаяГруппа
			И ЭлементФормы.Вид <> ВидГруппыФормы.Страницы
			И ЭлементФормы.Вид <> ВидГруппыФормы.Страница Тогда
		
		Если УстанавливатьОграничение Тогда
			ДобавитьОграничение(ТаблицаОграничения, ЭлементФормы, "ТолькоПросмотр", Истина);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
		Если УстанавливатьОграничение Тогда
			ДобавитьОграничение(ТаблицаОграничения, ЭлементФормы, "ИзменятьСоставСтрок", Ложь);
			ДобавитьОграничение(ТаблицаОграничения, ЭлементФормы, "ИзменятьПорядокСтрок", Ложь);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Функция ВключитьРеквизит(МассивПрефиксы = Неопределено, ИмяРеквизита, СоответствиеВключить, СоответствиеИсключить, ВключениеПоУмолчанию = Истина)
	МассивПрефиксы.Вставить(0, "");
	
	ИндВключения = 0;
	ИндИсключения = 0;
	Для Инд = 1 По МассивПрефиксы.Количество() Цикл
		ПрефиксРодителя = ?(ЗначениеЗаполнено(МассивПрефиксы[Инд - 1]), ВРег(МассивПрефиксы[Инд - 1]) + ".", "");
		
		Если СоответствиеВключить[ПрефиксРодителя + "*"] <> Неопределено Тогда
			ИндВключения = Инд;
		КонецЕсли;
		Если СоответствиеИсключить[ПрефиксРодителя + "*"] <> Неопределено Тогда
			ИндИсключения = Инд;
		КонецЕсли;
	КонецЦикла;
	
	Если СоответствиеВключить[ИмяРеквизита + ".*"] <> Неопределено Тогда
		ИндВключения = МассивПрефиксы.Количество() + 1;
	ИначеЕсли СоответствиеВключить[ИмяРеквизита] <> Неопределено Тогда
		ИндВключения = МассивПрефиксы.Количество() + 2;
	КонецЕсли;
	
	Если СоответствиеИсключить[ИмяРеквизита + ".*"] <> Неопределено Тогда
		ИндВключения = МассивПрефиксы.Количество() + 1;
	ИначеЕсли СоответствиеИсключить[ИмяРеквизита] <> Неопределено Тогда
		ИндИсключения = МассивПрефиксы.Количество() + 2;
	КонецЕсли;
	
	Если ИндИсключения > ИндВключения Тогда
		Возврат Ложь;
		
	ИначеЕсли ИндИсключения < ИндВключения Тогда
		Возврат Истина;
	Иначе
		Возврат ВключениеПоУмолчанию;
	КонецЕсли;
КонецФункции

Процедура ДобавитьОграничение(ТаблицаОграничения, ЭлементФормы, ИмяСвойства, Значение)
	НоваяСтрока = ТаблицаОграничения.Добавить();
	НоваяСтрока.ИмяЭлемента = ЭлементФормы.Имя;
	НоваяСтрока.ИмяСвойства = ИмяСвойства;
	НоваяСтрока.ЗначениеОтмены = ЭлементФормы[ИмяСвойства];
	НоваяСтрока.ЗначениеОграничения = Значение;
	
	ЭлементФормы[ИмяСвойства] = Значение;
КонецПроцедуры

// Отмена ограничения доступа к реквизитам
// 
// Параметры:
// 	Форма - УправляемаяФорма - 
Процедура ОтменитьОграничениеИзмененияРеквизитов(Форма) Экспорт
	ИмяДопРеквизита = "МОД_ОграничениеИзмененияРеквизитов_Параметры";

	СтруктураЗначения = Новый Структура(ИмяДопРеквизита);
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, Форма);
	
	Если СтруктураЗначения[ИмяДопРеквизита] <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из Форма[ИмяДопРеквизита] Цикл
			ЭлементФормы = Форма.Элементы.Найти(СтрокаТаблицы.ИмяЭлемента);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить;
			Иначе
				ЭлементФормы[СтрокаТаблицы.ИмяСвойства] = СтрокаТаблицы.ЗначениеОтмены;
			КонецЕсли;
		КонецЦикла;
		
		Форма[ИмяДопРеквизита].Очистить();
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

// Восстановление ограничения реквизитов
// 
// Параметры:
// 	Форма - УправляемаяФорма - 
Процедура ВосстановитьОграничениеИзмененияРеквизитов(Форма) Экспорт
	ИмяДопРеквизита = "МОД_ОграничениеИзмененияРеквизитов_Параметры";

	СтруктураЗначения = Новый Структура(ИмяДопРеквизита);
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, Форма);
	
	Если СтруктураЗначения[ИмяДопРеквизита] <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из Форма[ИмяДопРеквизита] Цикл
			ЭлементФормы = Форма.Элементы.Найти(СтрокаТаблицы.ИмяЭлемента);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить;
			Иначе
				Если ЭлементФормы[СтрокаТаблицы.ИмяСвойства] <> СтрокаТаблицы.ЗначениеОграничения Тогда
					СтрокаТаблицы.ЗначениеОтмены = ЭлементФормы[СтрокаТаблицы.ИмяСвойства];
					ЭлементФормы[СтрокаТаблицы.ИмяСвойства] = СтрокаТаблицы.ЗначениеОграничения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПодчиненныеЭлементы(Родитель, МассивРезультат = Неопределено)
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из Родитель.ПодчиненныеЭлементы Цикл
		МассивРезультат.Добавить(ЭлементФормы);
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			ПолучитьПодчиненныеЭлементы(ЭлементФормы, МассивРезультат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

Функция ПолучитьОписаниеТиповИзСтроки(ТекстОписание) Экспорт
	МассивТипы = Новый Массив;
	КвалификаторыЧисла = Неопределено;
	КвалификаторыДаты = Неопределено;
	КвалификаторыСтроки = Неопределено;
	
	ЕстьРасширенноеОписание = (Найти(ТекстОписание, "(") > 0);
	Если НЕ ЕстьРасширенноеОписание Тогда
		ЕстьРасширенноеОписание = СтрЧислоВхождений(ТекстОписание, "Ссылка") > СтрЧислоВхождений(ТекстОписание, "Ссылка.");
	КонецЕсли;
	
	Если ЕстьРасширенноеОписание Тогда
		Для Каждого Описание Из ПолучитьМассивОписаний(ТекстОписание) Цикл
			Поз = Найти(Описание, "(");
			Если Поз > 0 Тогда
				ИмяТипа = Лев(Описание, Поз - 1);
				МассивПараметры = СтрРазделить(ПолучитьСодержимое(Описание, Поз), ",");
				МассивОписаниеПараметров = Новый Массив;
				Если ИмяТипа = "Число" Тогда
					МассивОписаниеПараметров.Добавить("Число(%1)");
					МассивОписаниеПараметров.Добавить("Число(%1)");
					МассивОписаниеПараметров.Добавить("ДопустимыйЗнак[%1]");
					
					КвалификаторыЧисла = Вычислить("Новый КвалификаторыЧисла(" + ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров) + ")");
					
				ИначеЕсли ИмяТипа = "Строка" Тогда
					МассивОписаниеПараметров.Добавить("Число(%1)");
					МассивОписаниеПараметров.Добавить("ДопустимаяДлина[%1]");
					
					КвалификаторыСтроки = Вычислить("Новый КвалификаторыСтроки(" + ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров) + ")");
					
				ИначеЕсли ИмяТипа = "Дата" Тогда
					МассивОписаниеПараметров.Добавить("ЧастиДаты[%1]");
					
					КвалификаторыДаты = Вычислить("Новый КвалификаторыДаты(" + ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров) + ")");
				КонецЕсли;

				МассивТипы.Добавить(Тип(ИмяТипа));
				
			ИначеЕсли Найти(Описание, ".") = 0
				И СтрЗаканчиваетсяНа(Описание, "Ссылка") Тогда
				
				#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
				Если Описание = "ЛюбаяСсылка" Тогда
					МенеджерыОбъектов = МенеджерПоПолномуИмени();
					Для Каждого МенеджерОбъектов Из МенеджерыОбъектов Цикл
						Для Каждого Тип Из МенеджерОбъектов.ТипВсеСсылки().Типы() Цикл
							МассивТипы.Добавить(Тип);
						КонецЦикла;
					КонецЦикла;
				Иначе
					МенеджерОбъектов = МенеджерПоПолномуИмени(Лев(Описание, СтрДлина(Описание) - СтрДлина("Ссылка")));
					Для Каждого Тип Из МенеджерОбъектов.ТипВсеСсылки().Типы() Цикл
						МассивТипы.Добавить(Тип);
					КонецЦикла;
				КонецЕсли;
				#Иначе
				ВызватьИсключение НСтр("ru = 'Неверный вызов'");
				#КонецЕсли
			Иначе
				МассивТипы.Добавить(Тип(Описание));
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Новый ОписаниеТипов(МассивТипы, , , КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	Иначе
		Возврат Новый ОписаниеТипов(ТекстОписание);
	КонецЕсли;
КонецФункции

Функция ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров)
	ТекстРезультат = "";
	Для Инд = 1 По МассивПараметры.Количество() Цикл
		Если НЕ ПустаяСтрока(МассивПараметры[Инд - 1]) Тогда
			ТекстРезультат = ТекстРезультат + "," + СтрЗаменить(МассивОписаниеПараметров[Инд - 1], "%1", "МассивПараметры[" + Число(Инд - 1) + "]");
		Иначе
			ТекстРезультат = ТекстРезультат + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сред(ТекстРезультат, 2);
КонецФункции

Функция ПолучитьМассивОписаний(ТекстОписание)
	МассивРезультат = Новый Массив;
	
	НачалоОписания = 1;
	СчетчикСкобок = 0;
	РежимСтроки = Ложь;
	Для Инд = 1 По СтрДлина(ТекстОписание) Цикл
		ТекущийСимвол = Сред(ТекстОписание, Инд, 1);
		Если ТекущийСимвол = ","
			И НЕ РежимСтроки
			И СчетчикСкобок = 0 Тогда
			
			Описание = СокрЛП(Сред(ТекстОписание, НачалоОписания, Инд - НачалоОписания));
			Если ЗначениеЗаполнено(Описание) Тогда
				МассивРезультат.Добавить(СокрЛП(Описание));
			КонецЕсли;
			
			НачалоОписания = Инд + 1;
			
		ИначеЕсли ТекущийСимвол = """" Тогда
			РежимСтроки = НЕ РежимСтроки;
			
		ИначеЕсли НЕ РежимСтроки
			И ТекущийСимвол = "(" Тогда
			
			СчетчикСкобок = СчетчикСкобок + 1;
			
		ИначеЕсли НЕ РежимСтроки
			И ТекущийСимвол = ")" Тогда
			
			СчетчикСкобок = СчетчикСкобок - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимСтроки Тогда
		ВызватьИсключение "Не найдена завершающая "" в " + ТекстОписание;
	ИначеЕсли СчетчикСкобок > 0 Тогда
		ВызватьИсключение "Не найдена завершающая ) в " + ТекстОписание;
	КонецЕсли;
	
	Описание = СокрЛП(Сред(ТекстОписание, НачалоОписания, Инд - НачалоОписания));
	Если ЗначениеЗаполнено(Описание) Тогда
		МассивРезультат.Добавить(СокрЛП(Описание));
	КонецЕсли;
	
	Возврат МассивРезультат;
КонецФункции

Функция ПолучитьСодержимое(ТекстСодержимое, НачПоз, СимволОкончания = ")")
	КонПоз = СтрНайти(ТекстСодержимое, СимволОкончания, НаправлениеПоиска.СКонца);
	Возврат Сред(ТекстСодержимое, НачПоз + 1, КонПоз - НачПоз - 1)
КонецФункции